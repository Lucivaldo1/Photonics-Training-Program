# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.
## Statistical QA
if (exist("source_directory")){
    if (source_directory!=filedirectory(filedirectory(which(currentscriptname)))){
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/mach_zehnder_modulator_init_qa.lsf");
    }
}else{
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/mach_zehnder_modulator_init_qa.lsf");      
}
err=error_count;

if (!unbalanced_MZM and exist("stat_parameters") and enable_stat_qa){

    stat_IL = matrix(N_trials,1);
    stat_Vpi = matrix(N_trials,1);
    if(mzm_thermal) {
        stat_Ppi_th = matrix(N_trials,1);
    }
    
    V_num_original = V_num;
            
    ?"---------------------------------";
    ?"Testing IL and Vpi with manual monte-carlo sweep: " + num2str(N_trials) + " trials.";
    for (i=1:N_trials){

        if(mzm_electrical) {
            
            V_num = V_num_original;
            V_test = linspace(Vpi_electrical_voltage1, Vpi_electrical_voltage2, V_num);    
            length_scale_factor = 1;
            V_sign = (Vpi_electrical_voltage2-Vpi_electrical_voltage1)/abs(Vpi_electrical_voltage2-Vpi_electrical_voltage1);
                
            if(abs(Vpi_electrical) >= abs(Vpi_electrical_voltage2 -  Vpi_electrical_voltage1)){
                # If the Vpi for the device is larger than (or equal to) the allowed bias range 
                # then make the length larger for QA purpose and add extra bias points at the end for a finer voltage grid near Vpi
                length_scale_factor = abs(Vpi_electrical) / abs(Vpi_electrical_voltage2 -  Vpi_electrical_voltage1) * 1.01;
                V_fine_range = min([abs(V_test(V_num)-V_test(V_num-1)), 0.04/length_scale_factor*abs(Vpi_electrical_voltage2-Vpi_electrical_voltage1)]);
                V_test = [V_test(1:V_num-1);linspace(Vpi_electrical_voltage2-V_sign*V_fine_range,Vpi_electrical_voltage2,5)];
                V_num = V_num+4;
            }
            else{
                # If Vpi is smaller than the bias range then add extra points near Vpi to increase accuracy of finding the minima
                V_fine_range = min([abs(V_test(V_num)-V_test(V_num-1)), 0.04*abs(Vpi_electrical_voltage2-Vpi_electrical_voltage1)]);
                V_near_Vpi = find(V_test<=V_sign*Vpi_electrical+V_fine_range/2 & V_test>=V_sign*Vpi_electrical-V_fine_range/2);
                if(V_near_Vpi == 0){
                    Vtemp1 = find(V_test>-Vpi_electrical);
                    Vtemp2 = find(V_test<-Vpi_electrical);
                    V_test = [V_test(1:Vtemp1(end)) ; linspace(V_sign*Vpi_electrical-V_sign*V_fine_range/2,V_sign*Vpi_electrical+V_sign*V_fine_range/2,5) ; V_test(Vtemp2(1):end)];
                    V_num = V_num+5;
                }
                else{
                    V_test = [V_test(1:V_near_Vpi-1) ; linspace(V_sign*Vpi_electrical-V_sign*V_fine_range/2,V_sign*Vpi_electrical+V_sign*V_fine_range/2,5) ; V_test(V_near_Vpi+1:end)];
                    V_num = V_num+4;
                }
            }        
        }
        
        ?"Trial #" + num2str(i);
        
            # Test circuit 1a: Vpi
            new;
            groupscope("::Root Element"); #return to root
            set("sample rate", sample_rate);
            
            fspan=sample_rate;
            if(mzm_electrical) {
                addelement("Optical Network Analyzer");
                ONA1_name = get("name");
                set("x position", -390);
                set("y position", -115);
                set("input parameter", "center and range");
                set("plot kind", "wavelength");
                set("center frequency", c/Operating_Wavelength);
                set("frequency range", fspan);
                set("number of points", 3);
                set("orthogonal identifier", mode_data{1}.ID);
                set("number of input ports", V_num);
                set("peak analysis","center");
                
                addelement("Optical Splitter");
                Split1_name = get("name");
                set("x position", -200);
                set("y position", 100);
                set("number of ports", V_num); ##
                set("split ratio","none"); ##
                
                addelement("DC Source");
                DC1_name = get("name");
                set("x position", -140);
                set("y position", -185);
                set("amplitude",0);
                
                connect(ONA1_name,"output",Split1_name,"input");
                
                V_zero = find(V_test == 0);
                DUT1_name_cell = cell(V_num);
                DC2_name_cell = cell(V_num);
                
                for (DUT1_num = 1:V_num){
                    if (DUT1_num == 1) {
                        addelement(design_kit_name + model);    # add first element
                        local_path=get("local path");
                        # set up statistical parameter in first element
                        dotlib_filename = importlib;
                        if (length(dotlib_filename)==0){ #in case the element is in the subfolder
                            libname=splitstring(library_name,"::");
                            if (fileexists(filedirectory(local_path)+"/"+libname{1}+'.lib')){
                                dotlib_filename=filedirectory(local_path)+"/"+libname{1}+".lib";
                            }else{
                                dotlib_filename=filedirectory(local_path)+"/"+libname{1}+".lib.x";   
                            }}
                        importlib(dotlib_filename,"statistical",{"seed":i});
                    }
                    else{
                        select(DUT1_name_cell{1});
                        copy;    # copy the first element to use the same values for the statistical parameters
                    }
                    if(exist("container_selection_code")) { eval(container_selection_code); }
                    DUT1_name_cell{DUT1_num} = get("name");
                    set("x position", 0);
                    set("y position", 200*(DUT1_num-1));
                    
                    # If the Vpi for the device is larger than (or equal to) the allowed bias range 
                    # then make the length larger for QA purpose
                    if(abs(Vpi_electrical) >= abs(Vpi_electrical_voltage2 -  Vpi_electrical_voltage1)){
                        set(wg_length.name,wg_length.default * length_scale_factor);
                    }
                    
                    addelement("DC Source");
                    DC2_name_cell{DUT1_num} = get("name");
                    set("x position", 200);
                    set("y position", 200*(DUT1_num-1));
                    if(bias_node=="anode"){set("amplitude",V_test(DUT1_num));}
                    if(bias_node=="cathode"){set("amplitude",-V_test(DUT1_num));}
                    
                    connect(Split1_name,"output "+num2str(DUT1_num),DUT1_name_cell{DUT1_num},ports{opt_1_RELAY}.name);
                    
                    connect(ONA1_name,"input "+num2str(DUT1_num),DUT1_name_cell{DUT1_num},ports{opt_2_RELAY}.name);
                    
                    try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_th_1_RELAY}.name);}catch(blank);
                    try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_th_2_RELAY}.name);}catch(blank);
                    try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_th_3_RELAY}.name);}catch(blank);
                    try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_th_4_RELAY}.name);}catch(blank);
                    try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_an_2_RELAY}.name);}catch(blank);
                    try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_cat_2_RELAY}.name);}catch(blank);
                    if(bias_node=="anode"){
                        try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_cat_1_RELAY}.name);}catch(blank);
                        try{connect(DC2_name_cell{DUT1_num},"output",DUT1_name_cell{DUT1_num},ports{ele_an_1_RELAY}.name);}catch(blank);
                    }
                    if(bias_node=="cathode"){
                        try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_an_1_RELAY}.name);}catch(blank);
                        try{connect(DC2_name_cell{DUT1_num},"output",DUT1_name_cell{DUT1_num},ports{ele_cat_1_RELAY}.name);}catch(blank);
                    }
                }
            }
        # Test circuit 1b: IL
        
        addelement("Optical Network Analyzer");
        ONA2_name = get("name");
        set("x position", 400);
        set("y position", -115);
        set("input parameter", "center and range");
        set("plot kind", "wavelength");
        set("center frequency", c/Operating_Wavelength);
        set("frequency range", fspan);
        set("number of points", 3);
        set("orthogonal identifier", mode_data{1}.ID);
        
        addelement("DC Source");
        DC3_name = get("name");
        set("x position", 600);
        set("y position", -185);
        set("amplitude",0);
        
        if(!mzm_electrical) {
            addelement(design_kit_name + model);
            set("x position", 200);
            set("y position", -15);
            dotlib_filename = importlib;
            if (length(dotlib_filename)==0){ #in case the element is in the subfolder
                libname=splitstring(library_name,"::");
                if (fileexists(filedirectory(local_path)+"/"+libname{1}+'.lib')){
                    dotlib_filename=filedirectory(local_path)+"/"+libname{1}+".lib";
                }else{
                    dotlib_filename=filedirectory(local_path)+"/"+libname{1}+".lib.x";   
                }}            
            importlib(dotlib_filename,"statistical",{"seed":i});
        }
        select(DUT1_name_cell{1});
        if(mzm_electrical) {
            copy(600,100);
        }
        if(exist("container_selection_code")) { eval(container_selection_code); }
        DUT2_name = get("name");
        
        connect(ONA2_name,"output",DUT2_name,ports{opt_1_RELAY}.name);
        connect(ONA2_name,"input 1",DUT2_name,ports{opt_2_RELAY}.name);
        
        try{connect(DC3_name,"output",DUT2_name,ports{ele_th_1_RELAY}.name);}catch(blank);
        try{connect(DC3_name,"output",DUT2_name,ports{ele_th_2_RELAY}.name);}catch(blank);
        try{connect(DC3_name,"output",DUT2_name,ports{ele_th_3_RELAY}.name);}catch(blank);
        try{connect(DC3_name,"output",DUT2_name,ports{ele_th_4_RELAY}.name);}catch(blank);
        try{connect(DC3_name,"output",DUT2_name,ports{ele_an_2_RELAY}.name);}catch(blank);
        try{connect(DC3_name,"output",DUT2_name,ports{ele_cat_2_RELAY}.name);}catch(blank);
        try{connect(DC3_name,"output",DUT2_name,ports{ele_cat_1_RELAY}.name);}catch(blank);
        try{connect(DC3_name,"output",DUT2_name,ports{ele_an_1_RELAY}.name);}catch(blank);
            
        run;
        
        # Test result 1: IL, Vpi
         
        if(mzm_electrical) {
            IL_dB = matrix(V_num,3);
            IL_test = matrix(V_num);
            
            for (DUT1_num = 1:V_num){
                gain_result = getresult(ONA1_name,"input "+num2str(DUT1_num)+"/mode 1/gain");
                lambda = gain_result.wavelength;
                gain_result = gain_result.getattribute("TE gain (dB)");
                IL_dB(DUT1_num,:) = gain_result;
                T_result = getresult(ONA1_name,"input "+num2str(DUT1_num)+"/mode 1/transmission");
                T_result = T_result.getattribute("TE transmission");
                IL_test(DUT1_num) = T_result(2);
            }
            # find the minima in IL to calculate Vpi
            temp = findpeaks(-abs(IL_test)^2,10);
            stat_Vpi(i) = -V_test(temp(1))*length_scale_factor;
        }
        # IL
        gain_result = getresult(ONA2_name,"input 1"+"/mode 1/gain");
        gain_result = gain_result.getattribute("TE gain (dB)");
        stat_IL(i) = abs(gain_result(2));
        
        if(mzm_electrical) {
            if (create_plots){
                plot(V_test, IL_dB(:,2), "Bias [V]", "gain [dB]", model+" Vpi test");
                if(length_scale_factor>1){
                    setplot("title",wg_length.name+" scaled by a factor of "+num2str(length_scale_factor));
                }
            }
        }

        if(mzm_thermal) {
            V_num = V_num_original;
            V_test = linspace(Ppi_thermal_voltage1, Ppi_thermal_voltage2, V_num);
            length_scale_factor = 1;
 
                # If the Ppi for the device is larger than (or equal to) the allowed power range
                # then make the length larger for QA purpose
                if(abs(Ppi_thermal) >= abs(Ppi_thermal_power2 -  Ppi_thermal_power1)){
                    length_scale_factor = abs(Ppi_thermal) / abs(Ppi_thermal_power2 -  Ppi_thermal_power1) * 1.01;
                    V_fine_range = min([abs(V_test(V_num)-V_test(V_num-1)), 0.04/length_scale_factor*abs(Ppi_thermal_voltage2-Ppi_thermal_voltage1)]);
                    V_test = [V_test(1:V_num-1) ; linspace(Ppi_thermal_voltage2-V_fine_range,Ppi_thermal_voltage2,5)];
                    V_num = V_num+4;                    
                } 
            else{            
                # Add extra points near Vpi_thermal to increase accuracy of finding the minima
                V_fine_range = min([abs(V_test(V_num)-V_test(V_num-1)), 0.04*abs(Ppi_thermal_voltage2-Ppi_thermal_voltage1)]);
                V_near_Vpi = find(V_test<=Vpi_thermal+V_fine_range/2 & V_test>=Vpi_thermal-V_fine_range/2);
                if(V_near_Vpi == 0){
                    Vtemp1 = find(V_test<Vpi_thermal);
                    Vtemp2 = find(V_test>Vpi_thermal);
                    V_test = [V_test(1:Vtemp1(end)) ; linspace(Vpi_thermal-V_fine_range/2,Vpi_thermal+V_fine_range/2,5) ; V_test(Vtemp2(1):end)];
                    V_num = V_num+5;
                }
                else{
                    V_test = [V_test(1:V_near_Vpi-1) ; linspace(Vpi_thermal-V_fine_range/2,Vpi_thermal+V_fine_range/2,5) ; V_test(V_near_Vpi+1:end)];
                    V_num = V_num+4;
                }              
            }

            new;
            groupscope("::Root Element"); #return to root
            set("sample rate", sample_rate);
            fspan=sample_rate;            
            addelement("Optical Network Analyzer");
            ONA1_name = get("name");
            set("x position", -390);
            set("y position", -115);
            set("input parameter", "center and range");
            set("plot kind", "wavelength");
            set("center frequency", c/Operating_Wavelength);
            set("frequency range", fspan);
            set("number of points", 3);
            set("orthogonal identifier", mode_data{1}.ID);
            set("number of input ports", V_num);
            set("peak analysis","center");

            addelement("Optical Splitter");
            Split1_name = get("name");
            set("x position", -200);
            set("y position", 100);
            set("number of ports", V_num); ##
            set("split ratio","none"); ##

            addelement("DC Source");
            DC1_name = get("name");
            set("x position", -140);
            set("y position", -185);
            set("amplitude",0);

            connect(ONA1_name,"output",Split1_name,"input");

            DUT1_name_cell = cell(V_num);
            DC2_name_cell = cell(V_num);

            for (DUT1_num = 1:V_num){
                if (DUT1_num == 1) {
                    addelement(design_kit_name + model);    # add first element
                    local_path=get("local path");
                    # set up statistical parameter in first element
                    dotlib_filename = importlib;
                    if (length(dotlib_filename)==0){ #in case the element is in the subfolder
                        libname=splitstring(library_name,"::");
                        if (fileexists(filedirectory(local_path)+"/"+libname{1}+'.lib')){
                            dotlib_filename=filedirectory(local_path)+"/"+libname{1}+".lib";
                        }else{
                            dotlib_filename=filedirectory(local_path)+"/"+libname{1}+".lib.x";   
                        }}
                    importlib(dotlib_filename,"statistical",{"seed":i});
                }
                else{
                    select(DUT1_name_cell{1});
                    copy;    # copy the first element to use the same values for the statistical parameters
                }                
                if(exist("container_selection_code")) { eval(container_selection_code); }
                DUT1_name_cell{DUT1_num} = get("name");
                set("x position", 0);
                set("y position", 200*(DUT1_num-1));
                if(abs(Ppi_thermal) >= abs(Ppi_thermal_power2 -  Ppi_thermal_power1)){
                    set(wg_length.name,wg_length.default * length_scale_factor);
                }
                
                addelement("DC Source");
                DC2_name_cell{DUT1_num} = get("name");
                set("x position", 200);
                set("y position", 200*(DUT1_num-1));
                set("amplitude",V_test(DUT1_num));

                connect(Split1_name,"output "+num2str(DUT1_num),DUT1_name_cell{DUT1_num},ports{opt_1_RELAY}.name);

                connect(ONA1_name,"input "+num2str(DUT1_num),DUT1_name_cell{DUT1_num},ports{opt_2_RELAY}.name);

                try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_th_2_RELAY}.name);}catch(blank);
                try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_th_3_RELAY}.name);}catch(blank);
                try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_th_4_RELAY}.name);}catch(blank);
                try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_an_1_RELAY}.name);}catch(blank);
                try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_an_2_RELAY}.name);}catch(blank);
                try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_cat_1_RELAY}.name);}catch(blank);
                try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_cat_2_RELAY}.name);}catch(blank);

                try{connect(DC2_name_cell{DUT1_num},"output",DUT1_name_cell{DUT1_num},ports{ele_th_1_RELAY}.name);}catch(blank);
            }
            run;

            # Test result 2: Ppi_thermal

            IL_test = matrix(V_num);

            for (DUT1_num = 1:V_num){
                T_result = getresult("ONA_1","input "+num2str(DUT1_num)+"/mode 1/transmission");
                T_result = T_result.getattribute("TE transmission");
                IL_test(DUT1_num) = T_result(2);
            }

            # find the minima in IL to calculate Ppi

            temp = findpeaks(-abs(IL_test)^2,10);
            stat_Vpi_th = V_test(temp(1)) * length_scale_factor;
            if(exist("IV")){
                stat_Ipi_th = interp(IV(:,2),IV(:,1),stat_Vpi_th);
                stat_Ppi_th(i) = stat_Vpi_th*stat_Ipi_th;
                I_test = interp(IV(:,2),IV(:,1),V_test);
            }else{
                if(exist("R_thermal_tuner")){
                    stat_Ppi_th(i) = stat_Vpi_th^2/R_thermal_tuner;
                    I_test = V_test^2/R_thermal_tuner;
                }
            }            
        }
    }    
    V_num = V_num_original;  # reset value of V_num
    if(mzm_electrical) {
        feval("/aux_scripts/mach_zehnder_modulator_BW_statistical_qa.lsf");
    }
    # Plot the results
    if(create_plots){
        histc(stat_IL);
        setplot("x label","IL (dB)"); setplot("y label","count"); setplot("title","N_trials = " + num2str(N_trials));        
        if(mzm_electrical) { 
            histc(stat_Vpi);
            setplot("x label","Vpi (V)"); setplot("y label","count"); setplot("title","N_trials = " + num2str(N_trials)); 
        
            #legend(mode_data{m}.name + " mode");
            if (exist("stat_f3dB")) {
                histc(stat_f3dB/1e9);
                setplot("x label","Electrical Bandwidth (GHz)"); setplot("y label","count"); setplot("title","N_trials = " + num2str(N_trials)); 
                legend(""); 
            }
        }
        if(mzm_thermal) { 
            histc(stat_Ppi_th*1000);
            setplot("x label","Ppi (mW)"); setplot("y label","count"); setplot("title","N_trials = " + num2str(N_trials)); 
        }        
    }
        
    ### Reference data comparison

    # Check reference data for testing:
    if(!stat_reference_data_available){
        msg = "Statistical regression QA test is skipped. Saving statistical reference data in " + foldername_ref;
        assert(msg,false);
        error_count = error_count+1;
        if(mzm_electrical) {
            stat_Vpi_ref = stat_Vpi;
        }
        if(mzm_thermal) {
            stat_Ppi_th_ref = stat_Ppi_th;
        }
        stat_IL_ref = stat_IL;
        if (exist("stat_f3dB")) {stat_f3dB_ref = stat_f3dB;}
        
        current_directory = pwd;
        cd(foldername_ref);
        if(mzm_electrical and mzm_thermal) {
            if (exist("stat_f3dB_ref")) { matlabsave(filename_ref_stat, stat_f3dB_ref, stat_Vpi_ref, stat_Ppi_th_ref, stat_IL_ref); }
            else { matlabsave(filename_ref_stat, stat_Vpi_ref, stat_Ppi_th_ref, stat_IL_ref); }
        }
        else if(!mzm_electrical and mzm_thermal){
            matlabsave(filename_ref_stat, stat_Ppi_th_ref, stat_IL_ref);
        }
        else {
            matlabsave(filename_ref_stat, stat_IL_ref);
        }
        cd(current_directory);
        
        ?"******* Saved statistical reference data";
    }else{
        # Compare with reference data
        ?"Testing Monte-Carlo sweep results against reference data";
    
    current_directory = pwd;
    cd(foldername_ref);
    try{
        matlabload(filename_ref_stat);
    }  catch(errMsg);
    cd(current_directory);
    if (errMsg !=''){
        msg=filename_ref_stat+".mat does not exist in "+foldername_ref;
        assert(msg,0);
        error_count = error_count+1;
        
    }else{

        if(mzm_electrical) {
            change_Vpi = max(abs(stat_Vpi_ref-stat_Vpi));
            msg = "Vpi (V) from MC analysis has a maximum variation of " + num2str(change_Vpi) + " compared to reference. Variation should be less than " + num2str(stat_Vpi_tolerance);
            pass = change_Vpi <= stat_Vpi_tolerance;
            if(!pass) {
                ? "ERROR - Vpi (V) in statistical QA";
                error_count = error_count+1;
            }
            assert(msg,pass);
            if(break_at_failure & !pass) { break; }    
        }
        if(mzm_thermal) {
            change_Ppi = max(abs(stat_Ppi_th_ref-stat_Ppi_th));
            msg = "Ppi (W) from MC analysis has a maximum variation of " + num2str(change_Ppi) + " compared to reference. Variation should be less than " + num2str(stat_Ppi_tolerance);
            pass = change_Ppi <= stat_Ppi_tolerance;
            if(!pass) {
                ? "ERROR - Ppi (W) in statistical QA";
                error_count = error_count+1;
            }
            assert(msg,pass);
            if(break_at_failure & !pass) { break; }    
        }    
        change_IL = max(abs(stat_IL_ref-stat_IL));
        msg = "IL (dB) from MC analysis has a maximum variation of " + num2str(change_IL) + " compared to reference. Variation should be less than " + num2str(stat_IL_tolerance);
        pass = change_IL <= stat_IL_tolerance;
        if(!pass) {
            ? "ERROR - IL (dB) in statistical QA";
            error_count = error_count+1;
        }
        assert(msg,pass);
        if(break_at_failure & !pass) { break; }   
        if(mzm_electrical) {
            if (exist("stat_f3dB_ref")) {
                change = max(abs(stat_f3dB_ref-stat_f3dB));
                msg = "Electrical Bandwidth from MC analysis has a maximum variation of " + num2str(change) + " compared to reference. Variation should be less than " + num2str(stat_f3dB_tolerance);
                pass = change <= stat_f3dB_tolerance;
                if(!pass) {
                    ? "ERROR - Electrical Bandwidth in statistical QA";
                    error_count = error_count+1;
                }
                assert(msg,pass);
                if(break_at_failure & !pass) { break; }        
            }
        }
        if (err==error_count){
            ?filebasename(currentscriptname)+" test passed.";
        }
        if (err==error_count){
            ?filebasename(currentscriptname)+" test passed.";
        }
    }
    }

}else if (unbalanced_MZM){
    ?"Test-bench is not applicable to this element. "+ filebasename(currentscriptname)+" did not run!";
}
else if(enable_stat_qa){
    ?"No statistical data. Skipped statistical QA.";
}
