##################################################################

# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.

# Unauthorized use, distribution, or duplication is prohibited.
# This product is subject to U.S. laws governing export and re-export.

# For full Legal Notice, see documentation.

##################################################################
warning_elements = "";
backward_warning="";
backward_error="";

### New Data Format ###

if (exist("general")){
    description=general.description;
    prefix=general.prefix;
    notes=general.notes;
    clear(general);
}
if (isstruct(ports)){
    new_ports=ports;
    strPorts=splitstring(getfield(new_ports),endl);
    plen=length(strPorts);
    fplen=0;
    if (plen!=0){
        for (p=1:plen){
            eval("fpexists=isfield(new_ports,'floating_port_"+num2str(p)+"');");
            if (fpexists==1){
                if (p!=fplen+1){
                    backward_error=backward_error+"Floating port names are not consistent. Please check the source data.";
                    break;
                }else{
                    fplen=fplen+1;
                }
            }
        }
    }

    pord=matrix(1,plen);
    for (p=1:plen){ # if one port has "order" field, all of the ports have to have a "order" filed.
        eval("ordexists=isfield(new_ports."+strPorts{p}+", 'order');"); 
        if (ordexists==1){
            eval("pord(1,"+num2str(p)+")=new_ports."+strPorts{p}+".order;"); 
        }else{
            pord(1,p)=0;
        }
    }

    if ( (find(pord==0)!=0)  or max(pord)>plen){
        if (sum(pord)!=0){
            backward_warning=backward_warning+"\n           Port order is not defined properly for all the ports. Please check the source data. Default port order will be used!";
        }
        orderexists=0;
    }else{
        orderexists=1;
    }
    
    for (po=1:length(pord)){
        if (pord(po)!=1){
            if (find(pord==pord(po)-1)==0){
                if (orderexists==1){
                    backward_warning=backward_warning+"\n           Port order is not defined properly for all the ports. Please check the source data. Default port order will be used!";
                    orderexists=0;            
                } 
            }
        }
    }
    
    if (orderexists==1){
        ports=cell(length(unique(pord)));
    }else{
        ports=cell(plen);
    }
    
    for (p=1:plen){
        fport=0;
        for (fp=(1:fplen)){
            fname="floating_port_"+num2str(fp);
            if (fname==strPorts{p}){
                fport=1;
            }
        }
        if (orderexists==1){
            eval("ord=new_ports."+strPorts{p}+".order;");
        }else{
            ord=p;
        }
        ports{ord}=struct;
        eval("ports{"+num2str(ord)+"}=new_ports."+strPorts{p}+";");
        if (strPorts{p}=="opt_1" or strPorts{p}=="opt_2"){
            ports{ord}.type="Optical Signal";
        }else{
            ports{ord}.type="Electrical Signal";
        }
        if (fport!=1){
            if (strPorts{p}=="th_pos_top"){
                eval("ele_th_1_RELAY="+num2str(ord)+";");
            }else if (strPorts{p}=="th_neg_top"){
                eval("ele_th_2_RELAY="+num2str(ord)+";");
            }else if (strPorts{p}=="th_pos_bot"){
                eval("ele_th_3_RELAY="+num2str(ord)+";");
            }else if (strPorts{p}=="th_neg_bot"){
                eval("ele_th_4_RELAY="+num2str(ord)+";");
            }else if (strPorts{p}=="ele_an_top"){
                eval("ele_an_1_RELAY="+num2str(ord)+";");
            }else if (strPorts{p}=="ele_cat_top"){
                eval("ele_cat_1_RELAY="+num2str(ord)+";");
            }else if (strPorts{p}=="ele_an_bot"){
                eval("ele_an_2_RELAY="+num2str(ord)+";");
            }else if (strPorts{p}=="ele_cat_bot"){
                eval("ele_cat_2_RELAY="+num2str(ord)+";");
            }else{
                eval(strPorts{p}+"_RELAY="+num2str(ord)+";");
            }
        }
    }
    clear(new_ports);
}

if (exist("parameters")){
    if (isfield(parameters,"wg_length")){wg_length=parameters.wg_length;}
    if (isfield(parameters,"imbalance_length")){
        imbalance_length=parameters.imbalance_length;
        default_imbalance_length = imbalance_length.default;}
    temperature=parameters.temperature.default;
    clear(parameters);
}

if (exist("model_data")){
    photonic_model=model_data.photonic_model;
    mode_data=model_data.mode_data;
    if (isfield(model_data.waveguide_data,"wavelength")){wavelength_data=model_data.waveguide_data.wavelength;}
    if (isfield(model_data.waveguide_data,"temperature")){temperature_data=model_data.waveguide_data.temperature;}
    wgs={"waveguide_passive_left","waveguide_thermal_tuner","waveguide_transition_left","waveguide_phase_shifter","waveguide_transition_right","waveguide_passive_right"};
    neff_all=matrix(1,6);
    ng_all=matrix(1,6);
    L1_all=matrix(1,6);
    loss_all=matrix(1,6);
    D_all=matrix(1,6);
    dneff_dT_all=matrix(1,6);
    for (wg=1:6){
        eval("wgexists=isfield(model_data.waveguide_data,'"+wgs{wg}+"');");
        if (wgexists==1){
            eval("neff_all(1,"+num2str(wg)+")=model_data.waveguide_data."+wgs{wg}+".neff;");
            eval("ng_all(1,"+num2str(wg)+")=model_data.waveguide_data."+wgs{wg}+".ng;");
            eval("loss_all(1,"+num2str(wg)+")=model_data.waveguide_data."+wgs{wg}+".loss;");
            eval("D_all(1,"+num2str(wg)+")=model_data.waveguide_data."+wgs{wg}+".D;");
            eval("dneff_dT_all(1,"+num2str(wg)+")=model_data.waveguide_data."+wgs{wg}+".dneff_dT;");
            if (exist("ele_an_1_RELAY") & wgs{wg}=="waveguide_phase_shifter"){
                if (exist("wg_length")){eval("L1_all(1,"+num2str(wg)+")=wg_length.default;");}
            }else if (!exist("ele_an_1_RELAY") & wgs{wg}=="waveguide_thermal_tuner"){
                if (exist("wg_length")){eval("L1_all(1,"+num2str(wg)+")=wg_length.default;");}
            }else{
                eval("L1_all(1,"+num2str(wg)+")=model_data.waveguide_data."+wgs{wg}+".length;");
            }
        }
    }
    if (neff_all(1)==0){
        neff_all(1)=model_data.waveguide_data.waveguide_hangover_left.neff;
        ng_all(1)=model_data.waveguide_data.waveguide_hangover_left.ng;
        loss_all(1)=model_data.waveguide_data.waveguide_hangover_left.loss;
    }
    L_in=model_data.waveguide_data.waveguide_hangover_left.length;
    L_out=model_data.waveguide_data.waveguide_hangover_right.length;
    dneff_dT=struct;
    dneff_dT.default_value=sum(dneff_dT_all)/length(find(dneff_dT_all));

    dneff_dT.visible_to_user=0.0;

    #electrical_tuner
    if (isfield(model_data,"electrical_tuner_data")){
        #electrical_bandwidth
        if (isfield(model_data.electrical_tuner_data,"bandwidth_data")){
        electrical_bandwidth_data=matrix(length(model_data.electrical_tuner_data.bandwidth_data.voltage),2);
        electrical_bandwidth_data(:,1)=model_data.electrical_tuner_data.bandwidth_data.voltage;
        electrical_bandwidth_data(:,2)=model_data.electrical_tuner_data.bandwidth_data.bandwidth;
        }

    #phase_shifter
        if (isfield(model_data.electrical_tuner_data,"phase_shifter_data")){
            phase_shifter_data=matrix(length(model_data.electrical_tuner_data.phase_shifter_data.voltage),3);
            phase_shifter_data(:,1)=model_data.electrical_tuner_data.phase_shifter_data.voltage;
            phase_shifter_data(:,2)=model_data.electrical_tuner_data.phase_shifter_data.delta_n;
            phase_shifter_data(:,3)=model_data.electrical_tuner_data.phase_shifter_data.delta_k;
        }
    }

    #thermal_tuner
    if (isfield(model_data,"thermal_tuner_data")){
        if (isfield(model_data.thermal_tuner_data,"phase_shifter_data")){
            thermal_tuner_data=matrix(length(model_data.thermal_tuner_data.phase_shifter_data.power),2);
            thermal_tuner_data(:,1)=model_data.thermal_tuner_data.phase_shifter_data.power;
            thermal_tuner_data(:,2)=model_data.thermal_tuner_data.phase_shifter_data.delta_phase;
        }
        if (isfield(model_data.thermal_tuner_data,"bandwidth_data")){thermal_bandwidth_data=model_data.thermal_tuner_data.bandwidth_data;}
        if (isfield(model_data.thermal_tuner_data,"data_format")){thermal_tuner_data_format=model_data.thermal_tuner_data.data_format;}
    }

    #th_eq_ckt_data
    if (isfield(model_data,"th_eq_ckt_data")){
        if (isfield(model_data.th_eq_ckt_data,"voltage")){
            IV=matrix(length(model_data.th_eq_ckt_data.voltage),2);
            IV(:,1)=model_data.th_eq_ckt_data.voltage;
            IV(:,2)=model_data.th_eq_ckt_data.current;
        }else if (isfield(model_data.th_eq_ckt_data,"R_thermal_tuner")){
            R_thermal_tuner=model_data.th_eq_ckt_data.R_thermal_tuner;
        }
    }

    #elec_eq_ckt_data
    if (isfield(model_data,"elec_eq_ckt_data")){
        par=splitstring(getfield(model_data.elec_eq_ckt_data),endl);
        for (v=1:length(par)){
            if (par{v}!="type"){
                eval(par{v}+"=model_data.elec_eq_ckt_data."+par{v}+";");
            }
        }
        if (isfield(model_data.elec_eq_ckt_data, "Cj_data")){
            Cj=matrix(length(model_data.elec_eq_ckt_data.Cj_data.voltage),2);
            Cj(:,1)=model_data.elec_eq_ckt_data.Cj_data.voltage;
            Cj(:,2)=model_data.elec_eq_ckt_data.Cj_data.cap;
        }
    }
    if (isfield(model_data,"use_travelling_wave_electrode")){use_travelling_wave_electrode=model_data.use_travelling_wave_electrode;}
    if (isfield(model_data,"enable_thermal_time_constant")){enable_thermal_time_constant=model_data.enable_thermal_time_constant;}
    splitter=model_data.splitter_data;
    splitter_loss=model_data.splitter_data.splitter_loss;
    number_of_taps_estimation=model_data.splitter_data.number_of_taps_estimation;
    if (isfield(model_data,"longer_arm")){longer_arm=model_data.longer_arm;}
    clear(model_data);
}
if (exist("FOMs")){
    FOM_names={"IL","Vpi_electrical","Ppi_thermal","notch_wavelength","FSR"};
    for (f=1:length(FOM_names)){
        eval("fOMexists=isfield(FOMs,'"+FOM_names{f}+"');");
        if (fOMexists==1){
            eval(FOM_names{f}+"=struct;");
            eval(FOM_names{f}+"=FOMs."+FOM_names{f}+";");
            eval(FOM_names{f}+".default_value=FOMs."+FOM_names{f}+".value;");
            eval("visexists=isfield(FOMs."+FOM_names{f}+",'visible_to_user');");
            if (visexists!=1){
                eval(FOM_names{f}+".visible_to_user=0;");
            }              
            eval("tunexists=isfield(FOMs."+FOM_names{f}+",'tuning');");
            if (tunexists==1){
                eval("lock_"+FOM_names{f}+"=FOMs."+FOM_names{f}+".tuning;");
            }     
            if (FOM_names{f}=="Ppi_thermal"){
                Ppi_thermal_power1=FOMs.Ppi_thermal.ref1;
                Ppi_thermal_power2=FOMs.Ppi_thermal.ref2;
            }
            if (FOM_names{f}=="Vpi_electrical"){
                Vpi_electrical_voltage1=FOMs.Vpi_electrical.ref1;
                Vpi_electrical_voltage2=FOMs.Vpi_electrical.ref2;
            }
        }   
    }
     if (isfield(FOMs, 'ER')){
        ER_V1=struct;
        ER_V1=FOMs.ER;
        ER_V1.default_value=FOMs.ER.value(1);
        if (isfield(FOMs.ER,"visible_to_user")!=1){
            ER_V1.visible_to_user=0;
        }  
        if (length(FOMs.ER.value)==2){
            ER_V2=struct;
            ER_V2=FOMs.ER;
            ER_V2.default_value=FOMs.ER.value(2);
            if (isfield(FOMs.ER,"visible_to_user")!=1){
                ER_V2.visible_to_user=0;
            }   
            ER_V2_voltage=FOMs.ER.ref2;
            ER_V1_voltage=FOMs.ER.ref1;
        }
        if (isfield(FOMs.ER,"tuning")){
            lock_ER=FOMs.ER.tuning;
        }
    }
    clear(FOMs);  
}
if (exist("QA")){
    operating_wavelength=QA.parameters.wavelength;
    Operating_Wavelength=QA.parameters.wavelength;
    if (isfield(QA.parameters,"BW_bias")){BW_bias=QA.parameters.BW_bias;}
    if (isfield(QA.parameters,"thermal_BW_bias")){thermal_BW_bias=QA.parameters.thermal_BW_bias;}
    if (isfield(QA,"BW_qa_type")){BW_qa_type=QA.BW_qa_type;}
    if (isfield(QA,'relative_tolerances')){
        tols={"BW_electrical","IL","Ppi_thermal","Vpi_electrical","ER","FSR","dneff_dT","notch_wavelength","BW_thermal"};
        for (t=1:length(tols)) {
            eval("tolexist=isfield(QA.relative_tolerances,'"+tols{t}+"');");
            if (tolexist==1){
                if (tols{t}=="BW_electrical"){ BW_tolerance=QA.relative_tolerances.BW_electrical;}
                else if (tols{t}=="BW_thermal"){thermal_BW_tolerance=QA.relative_tolerances.BW_thermal;}
                else{eval(tols{t}+"_tolerance=QA.relative_tolerances."+tols{t}+";");}
            }
        }
    }
    clear(QA);
}

# statistical
if (exist("statistical")){
    if (isfield(statistical,"perturb_top_arm_only")){perturb_top_arm_only=statistical.perturb_top_arm_only;}
    if (isfield(statistical,"parameters")){
        statPars=splitstring(getfield(statistical.parameters),endl);
        if (length(statPars)!=0){
            stat_parameters=cell(length(statPars));
            for (p=1:length(statPars)){
                eval("stat_parameters{"+num2str(p)+"}=statistical.parameters."+statPars{p}+";");
                }
        }
    }
    if (isfield(statistical,"QA")){
        N_trials=statistical.QA.N_trials;
        enable_stat_qa=statistical.QA.enable_qa;
        stat_reference_data_available=statistical.QA.reference_data_available;
        if (isfield(statistical.QA,'absolute_tolerances')){
            stattols={"IL","ER","FSR","Vpi_electrical","BW_electrical","notch_wavelength","Ppi_thermal"};
            for (t=1:length(stattols)) {
                eval("stattolexist=isfield(statistical.QA.absolute_tolerances,'"+stattols{t}+"');");
                if (stattolexist==1){
                    if(stattols{t}=="notch_wavelength"){
                        eval("stat_notch_tolerance=statistical.QA.absolute_tolerances."+stattols{t}+";");
                    }if(stattols{t}=="Vpi_electrical"){
                        eval("stat_Vpi_tolerance=statistical.QA.absolute_tolerances."+stattols{t}+";");
                    }if(stattols{t}=="Ppi_thermal"){
                        eval("stat_Ppi_tolerance=statistical.QA.absolute_tolerances."+stattols{t}+";");
                    }if(stattols{t}=="BW_electrical"){
                        eval("stat_f3dB_tolerance=statistical.QA.absolute_tolerances."+stattols{t}+";");
                    }else{
                        eval("stat_"+stattols{t}+"_tolerance=statistical.QA.absolute_tolerances."+stattols{t}+";");
                    }
                }
            }
        }
    }
    clear(statistical);
}


### backward ###
temp = cell(8);
temp{1} = "notch_wavelength"; temp{2} = "FSR"; temp{3} = "IL";
temp{4} = "ER_V1"; temp{5} = "ER_V2"; temp{6} = "Vpi_electrical"; temp{7} = "Ppi_thermal"; temp{8} = "dneff_dT";

if(exist("ele_cat_1_RELAY")){
    mzm_electrical = 1;
    if(!exist('lock_Vpi_electrical')){
        lock_Vpi_electrical = lock_Vpi;
        warning_elements = warning_elements + " lock_Vpi"; 
    }
}
else {
    mzm_electrical = 0;
}
if(exist("ele_th_1_RELAY")) {
    mzm_thermal = 1;
}else{
    mzm_thermal = 0;
}

if(exist('thermal_tuner')){
    if(!thermal_tuner){
        mzm_thermal = 0;
    }
}

if(!exist('wavelength_data')){
    wavelength_data = lambda0;
    warning_elements = warning_elements + " lambda0";   
}

if(!exist('temperature_data')){
    temperature_data= 300;
    warning_elements = warning_elements + " temperature_data";    
}

if(!exist('D_all')){
    D_all = zeros(1,6);
    warning_elements = warning_elements + " D_all";    
}

if(!exist('ER_V1_voltage') and imbalance_length.default!=0 and mzm_electrical == 1){
    ER_V1_voltage = 0;
    warning_elements = warning_elements + " ER_V1_voltage";   
}

if(!exist('ER_V2') and imbalance_length.default!=0 and mzm_electrical == 1){
    ER_V2 = ER_V1;
    warning_elements = warning_elements + " ER_V2";   
}

if(!exist('ER_V2_voltage') and imbalance_length.default!=0 and mzm_electrical == 1){
    ER_V2_voltage = ER_V1_voltage + 0.01;
    warning_elements = warning_elements + " ER_V2_voltage";   
}

if(!exist('use_travelling_wave_electrode') and mzm_electrical == 1){
    use_travelling_wave_electrode = false;
    warning_elements = warning_elements + " use_travelling_wave_electrode";    
}

if(!exist('splitter')){
    splitter = struct;
    splitter.spar_filename = MMI_filename;
    splitter.input = MMI_port_1;
    splitter.output1 = MMI_port_2;
    splitter.output2 = MMI_port_3;
    warning_elements = warning_elements + " splitter";    
}
if(mzm_thermal){
    if(exist('IV')){
        IV_minus = flip(-IV,1);
        if(IV(1,1)==0){
            IV_interp = [IV_minus(1:end-1,:);IV];
        }else{
            IV_interp = [IV_minus(1:end,:);IV];
        }
    }else{
        if(!exist('R_thermal_tuner')){
            R_thermal_tuner = 100;
            backward_warning=backward_warning+ "\n           WARNING: Neither R_thermal_tuner nor IV data is provided. R_thermal_tuner is set to a default value of 100 Ohms.";
        }
        IV_interp = [-100,-100/R_thermal_tuner; 0,0 ; 100,100/R_thermal_tuner];
    }
    size_thermal_data = size(thermal_tuner_data);
    if(size_thermal_data(2) == 3){
        thermal_tuner_data_temp = thermal_tuner_data;
        thermal_tuner_data = matrix(size_thermal_data(1),2);
        if(exist("R_thermal_tuner")){
            thermal_tuner_data(:,1) = thermal_tuner_data_temp(:,1)^2/R_thermal_tuner;
        }
        else{
            thermal_tuner_current_data = interp(IV_interp(:,2),IV_interp(:,1),thermal_tuner_data_temp(:,1));
            thermal_tuner_data(:,1) = thermal_tuner_current_data * thermal_tuner_data_temp(:,1);
        }
        thermal_tuner_data(:,2) = 2*pi*thermal_tuner_data_temp(:,2)/wavelength_data*L1_all(2);
        warning_elements = warning_elements + " thermal_tuner_data";        
    }
    if(!exist("Ppi_thermal")){
        lock_Ppi_thermal = lock_Vpi_thermal;
        Vpi_current = interp(IV_interp(:,2),IV_interp(:,1),Vpi_thermal);
        Ppi_thermal = Vpi_thermal*Vpi_current;
        Ppi_thermal_current1 = interp(IV_interp(:,2),IV_interp(:,1),Vpi_thermal_voltage1);
        Ppi_thermal_current2 = interp(IV_interp(:,2),IV_interp(:,1),Vpi_thermal_voltage2);
        Ppi_thermal_power1 = Ppi_thermal_current1*Vpi_thermal_voltage1;
        Ppi_thermal_power2 = Ppi_thermal_current2*Vpi_thermal_voltage2;
        warning_elements = warning_elements + " Ppi_thermal";        
    }

}

for (i=1:length(temp)){
    eval("exist_temp = exist('"+temp{i}+"');");
    if(exist_temp){
        eval("FOM_name = " + temp{i} + ";");
        if(!isfield(FOM_name, 'default_value')){
            temp_save = num2str(FOM_name);
            eval(temp{i}+"=struct;");
            eval(temp{i}+".default_value="+temp_save+";");
            eval(temp{i}+".visible_to_user = 0;");
            warning_elements = warning_elements + " "+temp{i};            
        }
    }
}  

if(exist("wg_length")){
    if(isfield(wg_length, "visible")){
        wg_length.visible_to_user = wg_length.visible;
        warning_elements = warning_elements + " wg_length";       
    }
}

if(exist("imbalance_length")){
    if(isfield(imbalance_length, "visible")){
        imbalance_length.visible_to_user = imbalance_length.visible;
        warning_elements = warning_elements + " imbalance_length";          
    }
}

if (warning_elements!= ""){
    backward_warning = backward_warning+ "\n           WARNING: Following data are in an old format or do not exist:\n          "+ warning_elements+endl+"           This format may not be supported in the future. Please refer to the documentation and update the data format.\n          "+endl;
}
