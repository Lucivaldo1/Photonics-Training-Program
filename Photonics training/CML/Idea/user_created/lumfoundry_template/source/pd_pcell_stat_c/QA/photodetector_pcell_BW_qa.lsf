# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.

# Start loop to run QA over single or multiple bias voltages (set by the source .lsf file)
if (exist("source_directory")){
    if (source_directory!=filedirectory(filedirectory(which(currentscriptname)))){
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/photodetector_pcell_init_qa.lsf");
    }
}else{
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/photodetector_pcell_init_qa.lsf");      
}
err=error_count;

if(!DC_operation_only){
    
    ?"Running bandwidth tests for min, default and max length and width values...";
    leg = cell((length(test_pd_width)*length(test_pd_length)*length(bias_voltage_test)*length(temperature_test))+1);
    for(inx=1:length(leg)){ leg{inx} = "";}
    count =1;
    for(wdh=1:length(test_pd_width)){
        for(lnh=1:length(test_pd_length)){
            for(bias=1:length(bias_voltage_test)){ 
                for(temp=1:length(temperature_test)){                
                    test_bias = bias_voltage_test(bias);
                    test_temp = temperature_test(temp);                
                    ###### Test setup  ######
                    
                    new; # new simulation
                    
                    # set up the simulation parameters in Root Element
                    set("monitor data","save to memory");
                    set("time window",4e-9);
                    set("sample rate",sample_rate_test);
                    
                    ### Test circuit 3: Bandwidth
                    
                    # In this test we feed an optical impulse to the photodetector under test.
                    # The photocurrent at the electrical cathode is measured using an oscilloscope.
                    # This photocurrent is the impulse response of the photodetector
                    # A Fourier transform of the impulse response gives the 3dB cutoff frequency
                    
                    # Setting the simulation parameters
                    delay = 4e-10;  	# the impulse should not be applied at t = 0
                    fmax = 500e9;
                    # Add elements
                    addelement(design_kit_name + model);
                    DUT3_name = get("name");
                    if(exist("container_selection_code")) { eval(container_selection_code); }
                    set("x position", -87);
                    set("y position", 30);
                    set("enable_shot_noise", false);
                    set("thermal_noise",0);
                    setexpression(DUT3_name,"temperature",'');
                    set("temperature",test_temp);
                    set(pd_width.name, test_pd_width(wdh));
                    set(pd_length.name, test_pd_length(lnh));
                    
                    addelement("CW Laser");
                    CWL3_name = get("name");
                    set("x position", -460);
                    set("y position", 0);
                    set("power",0.001);
                    set("frequency", c/wavelength_test);
                    
                    addelement("Impulse");
                    IMP1_name = get("name");
                    set("x position", -260);
                    set("y position", -210);
                    set("delay",delay);
                    set("amplitude",1);
                    set("bias",0);
                    
                    addelement("Optical Amplitude Modulator");
                    AM1_name = get("name");
                    set("x position", -285);
                    set("y position", 30);
                    set("modulation index",0.01);
                    
                    addelement("DC Source"); #to be connected to anode
                    DC5_name = get("name");
                    set("x position", 94);
                    set("y position", -150);
                    set("amplitude", test_bias);
                    
                    addelement("DC Source"); #to be connected to cathode
                    DC6_name = get("name");
                    set("x position", -70);
                    set("y position", -150);
                    set("amplitude",0);
                    
                    addelement("Oscilloscope");
                    OSC3_name = get("name");
                    set("x position", 72);
                    set("y position", 154);
                    
                    # Connect elements
                    connect(CWL3_name,"output",AM1_name,"input");
                    connect(AM1_name,"output",DUT3_name,ports{opt_1_RELAY}.name);
                    connect(IMP1_name,"output",AM1_name,"modulation");
                    if(ele_cat_RELAY!=ele_an_RELAY){
                        connect(DC6_name,"output",DUT3_name,ports{ele_cat_RELAY}.name);
                    }
                    if(exist("ele_an_2_RELAY")) {
                        addelement("Fork 1xN");
                        Fork_name = get("name");
                        set("x position", 72);
                        set("y position", 54);
                        set("horizontal flipped",1);
                        set("number of ports",2);
                        
                        connect(DC5_name,"output",Fork_name,"input");
                        connect(Fork_name,"output 1", DUT3_name,ports{ele_an_RELAY}.name);
                        connect(Fork_name,"output 2",DUT3_name,ports{ele_an_2_RELAY}.name);
                    }else{
                        connect(DC5_name,"output",DUT3_name,ports{ele_an_RELAY}.name);
                    }
                    connect(DUT3_name,ports{ele_cat_RELAY}.name,OSC3_name,"input");
                    
                    # If the photodetector has two ports then add a dummy CW laser to that port
                    if(opt_2_RELAY!=0) {
                        addelement("CW Laser");
                        CWL_dummy3_name = get("name");
                        set("x position", -460);
                        set("y position", -100);
                        set("enabled",false);
                        set("frequency", c/wavelength_test);
                        connect(CWL_dummy3_name,"output",DUT3_name,ports{opt_2_RELAY}.name);
                    }
                    #### Run simulation  ####
                    run;
                    
                    
                    ###### Analysis ######
                    
                    # Test result 3: Bandwidth
                    
                    # The simulated bandwidth is compared with bandwidth from source data
                    
                    # Impulse response in time domain
                    s_out = getresult(OSC3_name,"signal");
                    t_out = s_out.time;
                    s_out = s_out.getattribute("amplitude (a.u.)");
                    p2 = find(s_out,max(s_out)):length(s_out);
                    t_out = t_out(p2);
                    t_out = t_out - t_out(1);
                    s_out = s_out(p2);
                    
                    # Impulse response in frequency domain
                    sf_out = fft(s_out,2,0);
                    f_out = fftw(t_out,2,0)/(2*pi);
                    p2 = 2:find(f_out,fmax);
                    f_out = f_out(p2);
                    sf_out = sf_out(p2);
                    
                    sf_out = sf_out/abs(sf_out(1));  # normalize impulse response
                    
                    # Find 3dB crossing point
                    tempx = linspace(min(f_out),max(f_out),5000);
                    tempy = interp(20*log10(abs(sf_out)),f_out,tempx);
                    f3dB_test = tempx(find(tempy,-3));
                    
                    # Plot impulse response
                    if(create_plots){                   
                        plot(1e-9*tempx, tempy);
                        leg{count} = "bias = " + num2str(test_bias) + "V W = " + num2str(test_pd_width(wdh)*1e6) + "um L = " + num2str(test_pd_length(lnh)*1e6) + "um T = " + num2str(test_temp)+ "K";
                        legend(leg);
                        setplot("x label", "Frequency (GHz)");
                        setplot("y label", "Normalized impulse response (dB)");
                        setplot("x min",0.5);
                        setplot("y max",0.1);
                        setplot("x max",300);	# limiting the max frequency to 300 GHz in the plot
                        setplot("y min",-20);                
                        holdon;
                    }
                    count = count + 1;
                    # Calculate bandwidth from source data
                    BW = pinch( interp(BW_data,voltage_data,pd_width.data,pd_length.data,temperature_data,voltage_data,test_pd_width(wdh),test_pd_length(lnh),test_temp) );
                    f3dB_model = interp(BW,voltage_data,getnamed(DC5_name,"amplitude")-getnamed(DC6_name,"amplitude"));
                    
                    # Compare bandwidth values
                    ?msg = "At bias " + num2str(test_bias) + "V, width " + num2str(test_pd_width(wdh)*1e6) + "um, length " + num2str(test_pd_length(lnh)*1e6) + "um, temperature " + num2str(test_temp) + "K, 3dB cutoff freq is " + num2str(abs(f3dB_test*1e-9)) + " GHz.  Expected value is " + num2str(abs(f3dB_model*1e-9)) + " GHz.";
                    pass = abs((f3dB_test-f3dB_model)/f3dB_model) < BW_rel_tolerance;
                    if(!pass) {
                        error_count = error_count+1;
                    }
                    assert(msg,pass);
                    if(break_at_failure & !pass) { break; }
                }
            }
        }
    }
    three_dB = ones(length(tempx)) * 0.001;
    plot(1e-9*tempx, log10(three_dB));
    setplot("x min",0.5);
    setplot("y max",0.1);
    setplot("x max",300);	# limiting the max frequency to 300 GHz in the plot
    setplot("y min",-20);
    leg{count} = "-3dB";
    legend(leg);
    holdoff;
    if (err==error_count){
        ?filebasename(currentscriptname)+" test passed.";
    }
}
else{
    ?"DC operation only. "+filebasename(currentscriptname)+" did not run!";
}