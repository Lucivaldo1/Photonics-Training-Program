# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.
if (exist("source_directory")){
    if (source_directory!=filedirectory(filedirectory(which(currentscriptname)))){
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/wg_parameterized_init_qa.lsf");
    }
}else{
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/wg_parameterized_init_qa.lsf");      
}
err=error_count;

central_frequency = c/wavelength_data;
central_wavelength = wavelength_data;

### 1. Run all tests for randomized parameter sets
?endl + "Running randomized parameter tests with seed: " + num2str(randreset(rand_seed));
?"-------------------------------------";

for (band = 1:length(test_bands)) {
    ?endl+"Testing band: " + test_bands{band}.name;
    ?"Wavelength range: " + num2str(test_bands{band}.wavelength_min*1e9) + " to " + num2str(test_bands{band}.wavelength_max*1e9) + " nm";
	
	wavelength_max_test = test_bands{band}.wavelength_max;
	wavelength_min_test = test_bands{band}.wavelength_min;

    for (mid = 1:length(mode_data)) {
        ? "Testing mode " + num2str(mid) + ": " + mode_data{mid}.name;
        ? "Beginning " + num2str(Nr) + " random parameter tests";
        ?"-------------------------------------";
        
		m_test = mid;
        plotcount = 0;
        
        for (tid = 1:Nr) {
            ### 1.1 Setup test circuits
			feval("/aux_scripts/wg_parameterized_setup_circuit.lsf");
			#generate wavelength grid for interpolation of the reference (expected) data
			f_start = getnamed(ONA{1},"start frequency");
			f_stop = getnamed(ONA{1},"stop frequency");
			npts = getnamed(ONA{1},"number of points");
			f_interval = (f_stop - f_start)/npts;
			f_grid = matrix(npts);
			for(i=1:npts){
				f_grid(i) = f_start + (i-1)*f_interval;
			}

			lambda = c/f_grid;
            
			### 1.1.2 Randomize length properties
			used_length_properties = matrix(length(length_props), 1);

			for (pid = 1:length(length_props)) {
				#For backwards compatibility, assume visible if the field doesnt exist.
				if(!isfield(length_props{pid}, "visible_to_user")) {
					length_props{pid}.visible_to_user = true;
				}
			
				if (length_props{pid}.visible_to_user) {
					if (isfield(length_props{pid}, "test_min") & isfield(length_props{pid}, "test_max")) {
						minval = length_props{pid}.test_min;
						maxval = length_props{pid}.test_max;
					} else {
						minval = length_props{pid}.min;
						maxval = length_props{pid}.max;
					}
					
					val = rand(minval,maxval);
					
					for (did = 1:length(DUT)) {
						setnamed(DUT{did}, length_props{pid}.name, val);
					}
					wg_length = val;
					#We need to store the rounded value into the variable name itself so the length formula works.
					eval("%" + length_props{pid}.name + "% = getnamed(DUT{1}, length_props{pid}.name);");
				}
			}

			### 1.1.3 Randomize parameters
			used_parameters = matrix(length(parameters), 1);

			for (pid = length(parameters):-1:1) {
				if (isfield(parameters{pid}, "test_min") & isfield(parameters{pid}, "test_max")) {
					minval = parameters{pid}.test_min;
					maxval = parameters{pid}.test_max;
				} else {
					minval = parameters{pid}.min;
					maxval = parameters{pid}.max;
				}
				
				val = rand(minval, maxval);
				
				for (did = 1:length(DUT)) {
					setexpression(DUT{did}, parameters{pid}.name, "");
					setnamed(DUT{did}, parameters{pid}.name, val);
				}                 
				
				eval("%" + parameters{pid}.name + "% = getnamed(DUT{1}, parameters{pid}.name);");
				
				expression = true;
				if (isfield(parameters{pid}, "expression")) {
					if (parameters{pid}.expression != "") {
						eval("used_parameters(pid) = " + parameters{pid}.expression + ";");
					} else{ expression = false; }
				} else{ expression = false; }
				
				if (!expression) {
					eval("used_parameters(pid) = %" + parameters{pid}.name + "%;");
				}
			}

			if (length_formula != "") {
				eval(length_formula);
			}
			
            ### 1.2 Simulate the circuits
            run;            
            
			### 1.3 Compare/Evaluate Test Results
			
			# 1.3.1 Compare mode data (neff, ng, D, loss) with provided mode data
			feval("/aux_scripts/wg_parameterized_compare_mode_data.lsf");
            
			# 1.3.2 Compare group delay for frequency and time domain
			if(!discontinuous_data){
				feval("/aux_scripts/wg_parameterized_compare_group_delay.lsf");
			}
			else{
				?"Discontinuous data detected for current combination of parameters. Group delay QA was skipped!";
			}
			           
			?"-------------------------------------";
        }
    }
}
if (err==error_count){
    ?filebasename(currentscriptname)+" test passed.";
}
cd(filedirectory(which(currentscriptname)));
