##################################################################

# Lumerical Confidential Information

# This file should be encrypted before sharing with external users!

##################################################################
warning_elements = "";
backward_warning="";
backward_error="";

### New Data Format ###

if (exist("general")){
    description=general.description;
    prefix=general.prefix;
    notes=general.notes;
    clear(general);
}
if (isstruct(ports)){
    strPorts=ports;
    port_labels={"opt_1", "opt_2"};
    portexist=cell(length(port_labels));
    count=0;
    for (p=1:length(portexist)){
        eval("portexist{"+num2str(p)+"}=isfield(strPorts,'"+port_labels{p}+"');");
    }
    pco=find(portexist==1);
    plen=length(pco);
    pord=matrix(1,plen);
    for (p=1:length(pco)){ # if one port has "order" field, all of the ports have to have a "order" filed.
        eval("ordexists=isfield(strPorts."+port_labels{pco(p)}+", 'order');"); 
        if (ordexists==1){
            eval("pord(1,"+num2str(p)+")=strPorts."+port_labels{pco(p)}+".order;"); 
        }else{
            pord(1,p)=0;
        }
    }
    if ( (find(pord==0)!=0)  or max(pord)>plen){
        if (sum(pord)!=0){
            backward_warning=backward_warning+"\n           Port order is not defined properly for all the defined ports. Please check the source data. Default port order will be used!";
        }
        orderexists=0;
    }else{
        orderexists=1;
    }
    
    for (po=1:length(pord)){
        if (pord(po)!=1){
            if (find(pord==pord(po)-1)==0){
                if (orderexists==1){
                    backward_warning=backward_warning+"\n           Port order is not defined properly for all the defined ports. Please check the source data. Default port order will be used!";
                    orderexists=0;            
                } 
            }
        }
    }
    
    if (orderexists==1){
        ports=cell(length(unique(pord)));
    }else{
        ports=cell(plen);
    }

    for (p=1:length(pco)){
        if (orderexists==1){
            eval("ord=strPorts."+port_labels{pco(p)}+".order;");
        }else{
            ord=p;
        }
        ports{ord}=struct;
        eval("ports{"+num2str(ord)+"}=strPorts."+port_labels{pco(p)}+";");
        ports{ord}.type="Optical Signal";
        eval(port_labels{pco(p)}+"_RELAY="+num2str(ord)+";");
    }
    clear(strPorts); 
}

if (isstruct(parameters)){
    new_parameters=parameters;
    co=length(splitstring(getfield(new_parameters),endl));
    noparam=0;
    nolparam=0;
    if (co!=0){
        for (p=1:co){
            eval("paramexists=isfield(new_parameters,'parameter_"+num2str(p)+"');");
            eval("lparamexists=isfield(new_parameters,'length_parameter_"+num2str(p)+"');"); 
            if (paramexists==1){
                if (p!=noparam+1){
                    backward_error=backward_error+"Parameter names are not consistent. Please check the source data.";
                    break;
                }else{
                    noparam=noparam+1;
                }
            }
            if (lparamexists==1){
                if (p!=nolparam+1){
                    backward_error=backward_error+"Length parameter names are not consistent. Please check the source data.";
                    break;
                }else{
                    nolparam=nolparam+1;
                }
            }
        }
    }
    if (noparam!=0){
        parameters=cell(noparam);
        for (p=1:noparam){
            eval("parameters{"+num2str(p)+"}=new_parameters.parameter_"+num2str(p)+";");
            eval("parameters{"+num2str(p)+"}.default_value=new_parameters.parameter_"+num2str(p)+".default;");
            eval("expexist=isfield(new_parameters.parameter_"+num2str(p)+",'expression');");
            if (expexist==0){
                parameters{p}.expression="";
            }
        }
    }
    if (nolparam!=0){
        length_props=cell(nolparam);
        for (lp=1:nolparam){   
            eval("length_props{"+num2str(lp)+"}=new_parameters.length_parameter_"+num2str(lp)+";");
            eval("length_props{"+num2str(lp)+"}.default_value=new_parameters.length_parameter_"+num2str(lp)+".default;");
            eval(length_props{lp}.name+"=length_props{"+num2str(lp)+"}.default;");
        }
   }
   clear(new_parameters);
}

if (exist("model_data")){
    photonic_model=model_data.photonic_model;
    if (isfield(model_data,"length_formula")){
        length_formula=model_data.length_formula;
    }else{
        length_formula="";
    }
    if (isfield(model_data,"length_formula_veriloga")){
        length_formula_veriloga=model_data.length_formula_veriloga;
    }else{
        length_formula_veriloga="";
    }
    if (isfield(model_data,"mode_data")){mode_data=model_data.mode_data;}
    if (isfield(model_data,"wavelength")){wavelength_data=model_data.wavelength;}    
    for (p=1:noparam){
       eval("pexist=isfield(model_data,'parameter_"+num2str(p)+"');");
       if (pexist==0){
           backward_error=backward_error+"Parameter values are not provided for the parameterized data.";
           break;
       }else{
           eval("parameters{"+num2str(p)+"}.value=model_data.parameter_"+num2str(p)+";");
       }
    }
    neff=model_data.neff;
    ng=model_data.ng;
    D=model_data.D;
    loss=model_data.loss;
    if (isfield(model_data,"backscatter_loss")){backscatter_loss=model_data.backscatter_loss;}
    if (model_data.number_of_taps_estimation=="disabled"){
        tap_estimation=0;
    }else if (model_data.number_of_taps_estimation=="group delay"){
        tap_estimation=2;
    }
    clear(model_data);
}

if (exist("QA")){

    if (isfield(QA,"single_test")){test_single=QA.single_test.enable_single_test;}
    if (test_single==1){
        if (noparam!=0){
            parameters_test_val=cell(noparam);
            for (p=1:noparam){ 
                eval("parameters_test_val{"+num2str(p)+"}=QA.single_test.parameters.parameter_"+num2str(p)+";");
            }
        }
        if (nolparam!=0){
            length_props_test_val=cell(nolparam);
            for (p=1:nolparam){ 
                eval("length_props_test_val{"+num2str(p)+"}=QA.single_test.parameters.length_parameter_"+num2str(p)+";");
            }
        }
        m_test=QA.single_test.parameters.mode;
        wavelength_min_test=QA.single_test.parameters.wavelength.min;
        wavelength_max_test=QA.single_test.parameters.wavelength.max;
    }
    Nr=QA.random_test.Nr;
    if (isfield(QA.random_test, "rand_seed")) {
        rand_seed=QA.random_test.rand_seed;
    }
    if (isfield(QA.random_test,"Nr_va")){Nr_va=QA.random_test.Nr_va;}
    test_bands=QA.random_test.parameters.wavelength_bands;
    for (b=1:length(test_bands)){
        test_bands{b}.wavelength_min=test_bands{b}.wavelength.min;
        test_bands{b}.wavelength_max=test_bands{b}.wavelength.max;
    }
    if (noparam!=0){
        for (p=1:noparam){ 
            eval("parameters{"+num2str(p)+"}.test_min=QA.random_test.parameters.parameter_"+num2str(p)+".min;");
            eval("parameters{"+num2str(p)+"}.test_max=QA.random_test.parameters.parameter_"+num2str(p)+".max;");
        }
    }
    if (nolparam!=0){
            for (p=1:nolparam){ 
                eval("length_props{"+num2str(p)+"}.test_min=QA.random_test.parameters.length_parameter_"+num2str(p)+".min;");
                eval("length_props{"+num2str(p)+"}.test_max=QA.random_test.parameters.length_parameter_"+num2str(p)+".max;");
            }
        }
    if (isfield(QA,'relative_tolerances')){
        tols={"D","delay_time","loss","neff","ng","backscatter_max"};
        for (t=1:length(tols)) {
            eval("tolexist=isfield(QA.relative_tolerances,'"+tols{t}+"');");
            if (tolexist==1){
                eval("relative_"+tols{t}+"_tolerance=QA.relative_tolerances."+tols{t}+";");
            }
        }
    }
    clear(QA);
}

# statistical
if (exist("statistical")){
    if (isfield(statistical,"wavelength_bands")){
        wavelength_bands=statistical.wavelength_bands;
        for (b=1:length(wavelength_bands)){
            wavelength_bands{b}.range=matrix(2,1);
            wavelength_bands{b}.range(1)=statistical.wavelength_bands{b}.wavelength.min;
            wavelength_bands{b}.range(2)=statistical.wavelength_bands{b}.wavelength.max;
        }
    }
    if (isfield(statistical,"parameters")){
        statPars=splitstring(getfield(statistical.parameters),endl);
        if (length(statPars)!=0){
            stat_parameters=cell(length(statPars));
            for (p=1:length(statPars)){
                eval("stat_parameters{"+num2str(p)+"}=statistical.parameters."+statPars{p}+";");
                }
        }
    }
    if (isfield(statistical,"QA")){
        N_trials=statistical.QA.N_trials;
        enable_stat_qa=statistical.QA.enable_qa;
        stat_reference_data_available=statistical.QA.reference_data_available;
        stat_qa_mode_id=statistical.QA.parameters.mode;
        stat_qa_band_id=statistical.QA.parameters.band;
        if (isfield(statistical.QA,'absolute_tolerances')){
            stattols={"D","loss","neff","ng"};
            for (t=1:length(stattols)) {
                eval("stattolexist=isfield(statistical.QA.absolute_tolerances,'"+stattols{t}+"');");
                if (stattolexist==1){
                    eval("stat_"+stattols{t}+"_tolerance=statistical.QA.absolute_tolerances."+stattols{t}+";");
                }
            }
        }
    }
    clear(statistical);
}

### backward ###
# CML/notes
# Old notes
note_count=0;
for(i=1:10) {
    if(exist("note_" + num2str(i))==1){
        note_count=note_count+1;  
    }
}
if (note_count!=0){
    notes=cell(note_count);
    for (i=1:note_count){
        notes{i}=struct;
        eval('notes{'+num2str(i)+'}.property = note_' + num2str(i) + '.property;');
        eval('notes{'+num2str(i)+'}.value = note_' + num2str(i) + '.value;');
        eval('clear(note_'+ num2str(i)+');');
    }
    warning_elements = warning_elements + " notes";
}
if (warning_elements!= ""){
    backward_warning = backward_warning+ "\n           WARNING: Following data are in an old format or do not exist:\n          "+ warning_elements+endl+"           This format may not be supported in the future. Please refer to the documentation and update the data format.\n          "+endl;
}


