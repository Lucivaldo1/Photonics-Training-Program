# Copyright (c) 2003-2022, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.
if (exist("source_directory")){
    if (source_directory!=filedirectory(filedirectory(which(currentscriptname)))){
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/tunable_ring_switch_init_qa.lsf");
    }
}else{
    clear;
    source_directory = filedirectory(filedirectory(which(currentscriptname)));
    foundry_directory = filedirectory(filedirectory(which(source_directory)));
    cd(filedirectory(which(currentscriptname)));
    feval("/aux_scripts/tunable_ring_switch_init_qa.lsf");      
}
err=error_count;


new;
groupscope("::Root Element"); #return to root
set("sample rate",sample_rate);

## Test circuit 1c: Ppi_thermal_tuner
addelement(design_kit_name + model);
DUT4_name = get("name");
set("x position", -140+500);
set("y position", 785);

addelement(design_kit_name + model);
DUT5_name = get("name");
set("x position", -140+500);
set("y position", 960);

addelement("Optical Splitter");
Split2_name = get("name");
set("x position", 185);
set("y position", 875);

addelement("DC Source");
DC5_name = get("name");
set("x position", -140+500);
set("y position", 565);
set("amplitude",0);

if(exist("IV")){
    P = IV(:,1)*IV(:,2);
    mod_eff_thermal_voltage1 = interp(IV(:,1),P,mod_eff_thermal_power1);
    mod_eff_thermal_voltage2 = interp(IV(:,1),P,mod_eff_thermal_power2);
}else{
    if(exist("R_thermal_tuner")){
        mod_eff_thermal_voltage1 = sqrt(mod_eff_thermal_power1 * R_thermal_tuner);
        mod_eff_thermal_voltage2 = sqrt(mod_eff_thermal_power2 * R_thermal_tuner);
    }
}

addelement("DC Source");
DC6_name = get("name");
set("x position", 550);
set("y position", 565);
set("amplitude",mod_eff_thermal_voltage1);

addelement("DC Source");
DC7_name = get("name");
set("x position", -140+500);
set("y position", 1150);
set("amplitude",mod_eff_thermal_voltage2);

addelement("Optical Network Analyzer");
ONA3_name = get("name");
set("x position", -390+500);
set("y position", 635);
set("analysis type","scattering data");
set("center frequency",f_c);
set("frequency range",fspan);
set("number of points",round( fspan*2e-8 ) );
set("plot kind", "wavelength");
set("peak at maximum",false);
set("peak threshold",100);
set("number of input ports", 2);
set("peak excursion",0.5);
set("pit excursion",0.5);

connect(ONA3_name,"output",Split2_name,"input");
connect(Split2_name,"output 1",DUT4_name,ports{opt_1_RELAY}.name);
connect(Split2_name,"output 2",DUT5_name,ports{opt_1_RELAY}.name);
connect(ONA3_name,"input 1",DUT4_name,ports{opt_2_RELAY}.name);
connect(ONA3_name,"input 2",DUT5_name,ports{opt_2_RELAY}.name);
connect(DC6_name,"output",DUT4_name,ports{ele_th_1_RELAY}.name);
connect(DC6_name,"output",DUT4_name,ports{ele_th_3_RELAY}.name);
connect(DC5_name,"output",DUT4_name,ports{ele_th_2_RELAY}.name);
connect(DC5_name,"output",DUT4_name,ports{ele_th_4_RELAY}.name);
connect(DC7_name,"output",DUT5_name,ports{ele_th_1_RELAY}.name);
connect(DC5_name,"output",DUT5_name,ports{ele_th_2_RELAY}.name);
connect(DC7_name,"output",DUT5_name,ports{ele_th_3_RELAY}.name);
connect(DC5_name,"output",DUT5_name,ports{ele_th_4_RELAY}.name);
connect(DC5_name,"output",DUT4_name,ports{ele_cat_RELAY}.name);
connect(DC5_name,"output",DUT4_name,ports{ele_an_RELAY}.name);
connect(DC5_name,"output",DUT5_name,ports{ele_cat_RELAY}.name);
connect(DC5_name,"output",DUT5_name,ports{ele_an_RELAY}.name);

if(exist("stat_parameters")){
    selectpartial(prefix);
    set("perturb_stat_params",0);  # flag to set all stat_prameters to zero for comparison with target values
}
run;

## Extract results
# thermal tuning Vpi
reslambda1 = getresult(ONA3_name,"input 1/mode 1/peak/frequency");
pos1 = find(reslambda1,lambda_c);
reslambda1 = reslambda1(pos1);

reslambda2 = getresult(ONA3_name,"input 2/mode 1/peak/frequency");
pos2 = find(reslambda2,lambda_c);
reslambda2 = reslambda2(pos2);

mod_eff_thermal_test = (reslambda2 - reslambda1) / (mod_eff_thermal_power2 - mod_eff_thermal_power1);

# create plots
if(create_plots){
    input1_gain_result = getresult(ONA3_name,"input 1/mode 1/gain");
    wl = input1_gain_result.wavelength;
    input1_gain = getresultdata(ONA3_name,"input 1/mode 1/gain");
    input2_gain = getresultdata(ONA3_name,"input 2/mode 1/gain");

    title= model + ' thermal Ppi';
    plot(wl*1e9, input1_gain, input2_gain, 'wavelength [nm]', 'gain [dB]', title);
    legend(num2str(mod_eff_thermal_power1)+" W", num2str(mod_eff_thermal_power2)+ "W");
}


## Compare with reference data
# Test result 1c: Vpi_thermal_tuner
msg = "mod_eff_thermal = " + num2str(mod_eff_thermal_test*1e9) + "nm/W, and should be " + num2str(mod_eff_thermal_ref*1e9) + " nm/W";
pass = abs(mod_eff_thermal_test-mod_eff_thermal_ref)/mod_eff_thermal_ref < mod_eff_thermal_rel_tolerance;
if(!pass) {
    ?msg;
    error_count = error_count+1;
}
assert(msg,pass);
if(break_at_failure & !pass) { break; }
if (err==error_count){
    ?filebasename(currentscriptname)+" test passed.";
}
