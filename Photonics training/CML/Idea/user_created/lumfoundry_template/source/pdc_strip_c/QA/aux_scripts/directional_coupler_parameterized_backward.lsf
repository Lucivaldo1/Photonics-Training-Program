##################################################################

# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.

##################################################################
warning_elements = "";
backward_warning="";
backward_error="";

### New Data Format ###

if (exist("general")){
    description=general.description;
    prefix=general.prefix;
    notes=general.notes;
    clear(general);
}
if (isstruct(ports)){
    strPorts=ports;
    port_labels={"opt_1", "opt_2", "opt_3", "opt_4"};
    portexist=cell(length(port_labels));
    count=0;
    for (p=1:length(port_labels)){
        eval("portexist{"+num2str(p)+"}=isfield(strPorts,'"+port_labels{p}+"');");
    }
    pco=find(portexist==1);
    plen=length(pco);

    pord=matrix(1,plen);
    for (p=1:length(pco)){ # if one port has "order" field, all of the ports have to have a "order" filed.
        eval("ordexists=isfield(strPorts."+port_labels{pco(p)}+", 'order');"); 
        if (ordexists==1){
            eval("pord(1,"+num2str(p)+")=strPorts."+port_labels{pco(p)}+".order;"); 
        }else{
            pord(1,p)=0;
        }
    }
    if ( (find(pord==0)!=0)  or max(pord)>plen){
        if (sum(pord)!=0){
            backward_warning=backward_warning+"\n           Port order is not defined properly for all the defined ports. Please check the source data. Default port order will be used!";
        }
        orderexists=0;
    }else{
        orderexists=1;
    }
    
    for (po=1:length(pord)){
        if (pord(po)!=1){
            if (find(pord==pord(po)-1)==0){
                if (orderexists==1){
                    backward_warning=backward_warning+"\n           Port order is not defined properly for all the defined ports. Please check the source data. Default port order will be used!";
                    orderexists=0;            
                } 
            }
        }
    }
    
    if (orderexists==1){
        ports=cell(length(unique(pord)));
    }else{
        ports=cell(plen);
    }

    for (p=1:length(pco)){
        if (orderexists==1){
            eval("ord=strPorts."+port_labels{pco(p)}+".order;");
        }else{
            ord=p;
        }
        ports{ord}=struct;
        eval("ports{"+num2str(ord)+"}=strPorts."+port_labels{pco(p)}+";");
        ports{ord}.type="Optical Signal";
        eval(port_labels{pco(p)}+"_RELAY="+num2str(ord)+";");

    }
    clear(strPorts);   
}

if (exist("parameters")){
    if (isfield(parameters,"coupling_length")){
        coupling_length_par=parameters.coupling_length;
        coupling_length=parameters.coupling_length.default;
        if (isfield(parameters.coupling_length,'min')){coupling_length_min=parameters.coupling_length.min;}
        if (isfield(parameters.coupling_length,'max')){coupling_length_max=parameters.coupling_length.max;}
    }
    if (isfield(parameters,"coupling_gap")){
        coupling_gap_par=parameters.coupling_gap;
        coupling_gap=parameters.coupling_gap.default;
        if (isfield(parameters.coupling_gap,'min')){coupling_gap_min=parameters.coupling_gap.min;}
        if (isfield(parameters.coupling_gap,'max')){coupling_gap_max=parameters.coupling_gap.max;}
    }
    temperature=parameters.temperature.default;
    
    # length parameters
    co=length(splitstring(getfield(parameters),endl));
    nolparam=0;
    if (co!=0){
        for (p=1:co){
            eval("lparamexists=isfield(parameters,'length_parameter_"+num2str(p)+"');");
            if (lparamexists==1){
                if (p!=nolparam+1){
                    backward_error=backward_error+"Length parameter names are not consistent. Please check the source data.";
                    break;
                }else{
                    nolparam=nolparam+1;
                }
            }
        }
    }
    if (nolparam!=0){
        bend_length_props=cell(nolparam);
        for (lp=1:nolparam){
            eval("bend_length_props{"+num2str(lp)+"}=parameters.length_parameter_"+num2str(lp)+";");
            eval("bend_length_props{"+num2str(lp)+"}.default_value=parameters.length_parameter_"+num2str(lp)+".default;");
            eval(bend_length_props{lp}.name+"=bend_length_props{"+num2str(lp)+"}.default;");
        }
   }
   clear(parameters); 
}
if (exist("model_data")){
    photonic_model=model_data.photonic_model;
    if (isfield(model_data,"mode_data")){mode_data=model_data.mode_data;}
    if (isfield(model_data.waveguide_data,"wavelength")){wavelength_data=model_data.waveguide_data.wavelength;}    
    if (isfield(model_data.waveguide_data,"temperature")){temperature_data=model_data.waveguide_data.temperature;}
    if (isfield(model_data.waveguide_data.waveguide,"neff")){neff=model_data.waveguide_data.waveguide.neff;}
    if (isfield(model_data.waveguide_data.waveguide,"ng")){ng=model_data.waveguide_data.waveguide.ng;}
    if (isfield(model_data.waveguide_data.waveguide,"D")){D=model_data.waveguide_data.waveguide.D;}
    if (isfield(model_data.waveguide_data.waveguide,"loss")){loss=model_data.waveguide_data.waveguide.loss;}
    if (isfield(model_data.waveguide_data.waveguide,"length_formula")){
        length_formula=model_data.waveguide_data.waveguide.length_formula;
        eval(length_formula);
    }
    if (isfield(model_data,"addloss_data")){
        wavelength_data_addloss=model_data.addloss_data.wavelength;
        addloss=model_data.addloss_data.addloss;
    }
    if (isfield(model_data.coupler_data,"couplercoeff_data")){
        coupling_gap_data_couplercoeff=model_data.coupler_data.couplercoeff_data.coupling_gap;
        couplercoeff=model_data.coupler_data.couplercoeff_data.couplercoeff;
    }
    if (isfield(model_data.coupler_data,"wavelength")){
        couplercoeff_lambda_max=model_data.coupler_data.wavelength.max;
        couplercoeff_lambda_min=model_data.coupler_data.wavelength.min;}
    if (isfield(model_data,"debug_mode")){debug_mode=model_data.debug_mode;}
    number_of_taps_estimation=model_data.number_of_taps_estimation;
    fir_taps=model_data.fir_taps;

    clear(model_data);
}
if (exist("QA")){

    if (isfield(QA,'relative_tolerances')){
        tols={"angle","length","loss"};
        for (t=1:length(tols)) {
            eval("tolexist=isfield(QA.relative_tolerances,'"+tols{t}+"');");
            if (tolexist==1){
                if (tols{t}=="length"){
                    eval("length_tolerance_nm=QA.relative_tolerances.length;");
                }else{
                    eval(tols{t}+"_tolerance=QA.relative_tolerances."+tols{t}+";");
                }
            }
        }
    }
    clear(QA);
}


### backward ###
# Old notes
note_count=0;
for(i=1:10) {
    if(exist("note_" + num2str(i))==1){
        note_count=note_count+1;  
    }
}
if (note_count!=0){
    notes=cell(note_count);
    for (i=1:note_count){
        notes{i}=struct;
        eval('notes{'+num2str(i)+'}.property = note_' + num2str(i) + '.property;');
        eval('notes{'+num2str(i)+'}.value = note_' + num2str(i) + '.value;');
        eval('clear(note_'+ num2str(i)+');');
    }
    warning_elements = warning_elements + " notes";
}
if (warning_elements!= ""){
    backward_warning = backward_warning+ "\n           WARNING: Following data are in an old format or do not exist:\n          "+ warning_elements+endl+"           This format may not be supported in the future. Please refer to the documentation and update the data format.\n          "+endl;
}
