# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.

if (exist("source_directory")){
    if (source_directory!=filedirectory(filedirectory(which(currentscriptname)))){
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/spar_fixed_init_qa.lsf");
    }
}else{
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/spar_fixed_init_qa.lsf");      
}
err=error_count;

feval('/aux_scripts/spar_parse_data.lsf');
?"Testing S parameters and group delay against source data";

current_directory = pwd;
cd('..');
sparData = parseSparData(spar_filename, ports);
cd(current_directory);

if (isstruct(sparData)){
  
    # Compare with spar data source .txt file
    spar_data_size = size(sparData.spar);
    S_data = matrix(spar_data_size(1),spar_data_size(2),spar_data_size(3),spar_data_size(4),spar_data_size(5));
    S_data(:,:,:,:,:) = (sparData.spar(:,:,:,:,:,1));
    
    S_data_interp = matrix(spar_data_size(2)*spar_data_size(4),spar_data_size(3)*spar_data_size(4),number_wavelength_points);
    S_complex_overlap = matrix(spar_data_size(2)*spar_data_size(4),spar_data_size(3)*spar_data_size(4),number_wavelength_points);
    for (output_mode = 1:max(mode_ID)) {
        for(input_mode = 1:max(mode_ID)) {
            for(i=1:spar_data_size(2)){
                for(j=1:spar_data_size(3)){
                    nonZero_ind = find(sparData.freq(:,i,j,output_mode,input_mode) !=0);
                    if(nonZero_ind){
                        S_data_wavelength_overlap = linspace(min([max(c/sparData.freq(nonZero_ind,i,j,output_mode,input_mode)), max(wavelength)]),max([min(c/sparData.freq(nonZero_ind,i,j,output_mode,input_mode)), min(wavelength)]),number_wavelength_points);
                        S_data_interp((i+(output_mode-1)*spar_data_size(2)),(j+(input_mode-1)*spar_data_size(3)),:) = interp(abs(S_data(nonZero_ind,i,j,output_mode,input_mode)),c/sparData.freq(nonZero_ind,i,j,output_mode,input_mode),S_data_wavelength_overlap);
                        S_complex_overlap((i+(output_mode-1)*spar_data_size(2)),(j+(input_mode-1)*spar_data_size(3)),:) = interp(abs(S_complex((i+(output_mode-1)*spar_data_size(2)),(j+(input_mode-1)*spar_data_size(3)),:)),wavelength,S_data_wavelength_overlap);                                             
                    }
                }
            }
        }
    }
    
    change = max(abs(S_data_interp - S_complex_overlap));
    # Determine which port/mode combination is failing
    spar_ind = find(abs(S_data_interp - S_complex_overlap), change);
    spar_size = size(S_data_interp);
    port_ind = mod(spar_ind,(spar_size(1)*spar_size(2)));
    if(port_ind == 0){
        output_port = spar_size(1);
        input_port = spar_size(2);
    }else{
        output_port = mod(port_ind,spar_size(1));    
        if(port_ind <= spar_size(1)){
            input_port = 1;
            if(output_port == 0){
                output_port = spar_size(1);
            }
        }else{
            if(output_port == 0){
                input_port = floor(port_ind/spar_size(1));
                output_port = spar_size(1);
            }else {input_port = floor(port_ind/spar_size(1)) +1;}
        }
    }
    input_mode = 1;
    output_mode = 1;
    if (max(mode_ID)>1){
        if(input_port > spar_size(2)/2){
            input_port = input_port - spar_size(2)/2;
            input_mode = 2;
        }
        if(output_port > spar_size(1)/2){
            output_port = output_port - spar_size(1)/2;
            output_mode = 2;
        }
    }
    msg = "S for input port " + num2str(input_port) + " mode " + num2str(input_mode) + 
            " to output port " + num2str(output_port) + " mode " + num2str(output_mode) + 
            " has been changed by: " + num2str(change)+ " and should be less than " + num2str(S_data_tolerance);
    pass = change <= S_data_tolerance;
    if(!pass) {
                error_count = error_count+1;
            }
    assert(msg,pass);
    if(break_at_failure & !pass) { break; }
    
    # Compare group delay if used for taps estimation
    if (number_of_taps_estimation == "group delay"){
        if (isfield(sparData, 'group_delay')) {
            gd_data_size = size(sparData.group_delay);
            GD_data = sparData.group_delay;
            GD_data_resized = matrix(gd_data_size(1)*gd_data_size(3),gd_data_size(2)*gd_data_size(3));
            for (mode_number = 1:max(mode_ID)) {
                for(i=1:gd_data_size(1)){
                    for(j=1:gd_data_size(2)){
                        if ((i==j) & (length(group_delay_result) !=1)){
                            GD_data_resized((i+(mode_number-1)*gd_data_size(1)),(j+(mode_number-1)*gd_data_size(2))) = 0;
                            group_delay_result((i+(mode_number-1)*gd_data_size(1)),(j+(mode_number-1)*gd_data_size(2))) = 0;
                        }else{
                            GD_data_resized((i+(mode_number-1)*gd_data_size(1)),(j+(mode_number-1)*gd_data_size(2))) = GD_data(i,j,mode_number,mode_number);
                        }
                    }
                }
            }
            if (exist('GD_qa_ports')){
                gd_ind = [1];
                for (mode_number = 1:mode_no){
                    for (i=1:length(GD_qa_ports)){
                        for(j=2:length(GD_qa_ports{i})){
                            gd_ind = [gd_ind, ((gd_data_size(1)^2*2+gd_data_size(1))*(mode_number-1)+gd_data_size(1)*(GD_qa_ports{i}(1)-1)+GD_qa_ports{i}(j))];
                        }
                    }
                }
                gd_ind = gd_ind(2:length(gd_ind));
            }else{
                gd_ind = find(group_delay_result !=0);
            }
            nonZero_ind = find(GD_data_resized(gd_ind) != 0);
            change = max((abs(GD_data_resized(gd_ind(nonZero_ind)) - group_delay_result(gd_ind(nonZero_ind))))/GD_data_resized(gd_ind(nonZero_ind)));
            msg = "The relative group delay difference is: " + num2str(change)+ " and should be less than " + num2str(group_delay_tolerance);
            pass = change <= group_delay_tolerance;
            if(!pass) {
                error_count = error_count+1;
            }
            assert(msg,pass);
            if(break_at_failure & !pass) { break; }
        }    
    
        
    }
}else{
    assert(sparData,0);
    error_count = error_count+1;
}
    

if (err==error_count){
?filebasename(currentscriptname)+" test passed.";
}