##################################################################

# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.

##################################################################
warning_elements = "";
backward_warning="";
backward_error="";

temp = cell(2);
units = cell(length(temp));
temp{1} = "Ppi"; temp{2} = "IL"; 

### New Data Format ###

if (exist("general")){
    description=general.description;
    prefix=general.prefix;
    notes=general.notes;
    clear(general);
}

if (isstruct(ports)){
    new_ports=ports;
    strPorts=splitstring(getfield(new_ports),endl);
    plen=length(strPorts);
    fplen=0;
    if (plen!=0){
        for (p=1:plen){
            eval("fpexists=isfield(new_ports,'floating_port_"+num2str(p)+"');");
            if (fpexists==1){
                if (p!=fplen+1){
                    backward_error=backward_error+"Floating port names are not consistent. Please check the source data.";
                    break;
                }else{
                    fplen=fplen+1;
                }
            }
        }
    }

    pord=matrix(1,plen);
    for (p=1:plen){ # if one port has "order" field, all of the ports have to have a "order" filed.
        eval("ordexists=isfield(new_ports."+strPorts{p}+", 'order');"); 
        if (ordexists==1){
            eval("pord(1,"+num2str(p)+")=new_ports."+strPorts{p}+".order;"); 
        }else{
            pord(1,p)=0;
        }
    }

    if ( (find(pord==0)!=0)  or max(pord)>plen){
        if (sum(pord)!=0){
            backward_warning=backward_warning+"\n           Port order is not defined properly for all the ports. Please check the source data. Default port order will be used!";
        }
        orderexists=0;
    }else{
        orderexists=1;
    }
    
    for (po=1:length(pord)){
        if (pord(po)!=1){
            if (find(pord==pord(po)-1)==0){
                if (orderexists==1){
                    backward_warning=backward_warning+"\n           Port order is not defined properly for all the ports. Please check the source data. Default port order will be used!";
                    orderexists=0;            
                } 
            }
        }
    }
    
    if (orderexists==1){
        ports=cell(length(unique(pord)));
    }else{
        ports=cell(plen);
    }
    
    for (p=1:plen){
        fport=0;
        for (fp=(1:fplen)){
            fname="floating_port_"+num2str(fp);
            if (fname==strPorts{p}){
                fport=1;
            }
        }
        if (orderexists==1){
            eval("ord=new_ports."+strPorts{p}+".order;");
        }else{
            ord=p;
        }
        ports{ord}=struct;
        eval("ports{"+num2str(ord)+"}=new_ports."+strPorts{p}+";");
       if (strPorts{p}=="opt_1" or strPorts{p}=="opt_2"){
            ports{ord}.type="Optical Signal";
            eval(strPorts{p}+"_RELAY="+num2str(ord)+";");
        }else{
            ports{ord}.type="Electrical Signal";
            if (fport!=1){
                if (strPorts{p}=="th_pos"){
                    eval("ele_h1_RELAY="+num2str(ord)+";");
                }else if (strPorts{p}=="th_neg"){
                    eval("ele_g1_RELAY="+num2str(ord)+";");
                }else if (strPorts{p}=="th_pos_2"){
                    eval("ele_h2_RELAY="+num2str(ord)+";");
                }else if (strPorts{p}=="th_neg_2"){
                    eval("ele_g2_RELAY="+num2str(ord)+";");
                }else{
                    eval(strPorts{p}+"_RELAY="+num2str(ord)+";");
                }
            }
        }
    }
    clear(new_ports);
}

if (exist("parameters")){
    wg_length=parameters.wg_length.default;
    wg_length_max = parameters.wg_length.max;
    wg_length_min = parameters.wg_length.min;
    wg_length_name = parameters.wg_length.name;
    wg_length_unit = parameters.wg_length.unit;
    wg_length_visible_to_user = parameters.wg_length.visible_to_user;
    temperature=parameters.temperature.default;
    clear(parameters);
}

if (exist("model_data")){
    photonic_model=model_data.photonic_model;
    mode_data=model_data.mode_data;
    if (isfield(model_data.waveguide_data,"wavelength")){wavelength_data=model_data.waveguide_data.wavelength;}    
    if (isfield(model_data.waveguide_data,"temperature")){temperature_data=model_data.waveguide_data.temperature;}
    neff=matrix(1,length(mode_data));
    ng=matrix(1,length(mode_data));
    loss=matrix(1,length(mode_data));
    neff=model_data.waveguide_data.waveguide.neff;
    ng=model_data.waveguide_data.waveguide.ng;
    loss=model_data.waveguide_data.waveguide.loss;
    dneff_dT=model_data.waveguide_data.waveguide.dneff_dT;

    #phase_shifter
    if (isfield(model_data,"phase_shifter_data")){
        phase_shifter_data=cell(length(mode_data));
        for(i=1:length(mode_data)){
            phase_shifter_data{i} = struct;
            phase_shifter_data{i}.power = model_data.phase_shifter_data.power(:,1);
            phase_shifter_data{i}.delta_phase = model_data.phase_shifter_data.delta_phase(:,i);
        }
    }

    #th_eq_ckt_data
    if (isfield(model_data,"th_eq_ckt_data")){
        if (isfield(model_data.th_eq_ckt_data,"voltage")){
            IV=matrix(length(model_data.th_eq_ckt_data.voltage),2);
            IV(:,1)=model_data.th_eq_ckt_data.voltage;
            IV(:,2)=model_data.th_eq_ckt_data.current;
        }else if (isfield(model_data.th_eq_ckt_data,"R_thermal_tuner")){
            R=model_data.th_eq_ckt_data.R_thermal_tuner;
        }
    }
    if (isfield(model_data,"bandwidth_data")){thermal_bandwidth=model_data.bandwidth_data;}

    clear(model_data);
}
if (exist("FOMs")){
    FOM_names={"Ppi_thermal","IL"};
    for (f=1:length(FOM_names)){
        eval("fOMexists=isfield(FOMs,'"+FOM_names{f}+"');");
        if (fOMexists==1){
            eval(temp{f}+"=struct;");
            eval(temp{f}+"=FOMs."+FOM_names{f}+";");
            eval(temp{f}+".default_value=FOMs."+FOM_names{f}+".value;");
            eval("visexists=isfield(FOMs."+FOM_names{f}+",'visible_to_user');");
            if (visexists!=1){
                eval(FOM_names{f}+".visible_to_user=0;");
            }
            eval("tunexists=isfield(FOMs."+FOM_names{f}+",'tuning');");
            if (tunexists==1){
                if(FOM_names{f}=="Ppi_thermal"){
                    eval("lock_"+temp{f}+"=FOMs."+FOM_names{f}+".tuning;");  
                    eval("Ppi_power1=FOMs.Ppi_thermal.ref1;");
                    eval("Ppi_power2=FOMs.Ppi_thermal.ref2;");
                }else{
                    eval("lock_loss=FOMs."+FOM_names{f}+".tuning;"); 
                }
            }
        }   
    }
    clear(FOMs);  
}
if (exist("QA")){
    if (isfield(QA.parameters,"BW_bias")){BW_test_bias=QA.parameters.BW_bias;}
    if (isfield(QA,'relative_tolerances')){
        tols={"BW","IL","Ppi_thermal","dneff_dT"};
        for (t=1:length(tols)) {
            eval("tolexist=isfield(QA.relative_tolerances,'"+tols{t}+"');");
            if (tolexist==1){
                if (tols{t}=="dneff_dT"){
                    eval(tols{t}+"_tolerance=QA.relative_tolerances."+tols{t}+";");
                }else if (tols{t}=="Ppi_thermal"){
                    eval("Ppi_rel_tolerance=QA.relative_tolerances."+tols{t}+";");
                }else{
                    eval(tols{t}+"_rel_tolerance=QA.relative_tolerances."+tols{t}+";");
                }
            }
        }
    }
    clear(QA);
}

# statistical
if (exist("statistical")){
    if (isfield(statistical,"parameters")){
        statPars=splitstring(getfield(statistical.parameters),endl);
        if (length(statPars)!=0){
            stat_parameters=cell(length(statPars));
            for (p=1:length(statPars)){
                eval("stat_parameters{"+num2str(p)+"}=statistical.parameters."+statPars{p}+";");
                }
        }
    }
    if (isfield(statistical,"QA")){
        N_trials=statistical.QA.N_trials;
        enable_stat_qa=statistical.QA.enable_qa;
        if (isfield(statistical.QA,'enable_stat_Ppi_qa')){enable_stat_Ppi_qa=statistical.QA.enable_Ppi_qa;}
        stat_reference_data_available=statistical.QA.reference_data_available;
        if (isfield(statistical.QA,'absolute_tolerances')){
            stattols={"IL","Ppi","neff","ng"};
            for (t=1:length(stattols)) {
                eval("stattolexist=isfield(statistical.QA.absolute_tolerances,'"+stattols{t}+"');");
                if (stattolexist==1){
                    eval("stat_"+stattols{t}+"_tolerance=statistical.QA.absolute_tolerances."+stattols{t}+";");
                }
            }
        }
    }
    clear(statistical);
}


### backward ###
for (i=1:length(temp)){
    eval("exist_temp = exist('"+temp{i}+"');");
if(exist_temp){
        eval("FOM_name = " + temp{i} + ";");
        if(!isfield(FOM_name, 'default_value')){
            if(length(FOM_name) ==1){
                temp_save = num2str(FOM_name);
                eval(temp{i}+"=struct;");
                eval(temp{i}+".default_value="+temp_save+";");
                eval(temp{i}+".visible_to_user = 0;");
            }else {
                temp_save1 = num2str(FOM_name(1));
                temp_save2 = num2str(FOM_name(2));
                eval(temp{i}+"=struct;");
                eval(temp{i}+".default_value=["+temp_save1+","+temp_save2+"];");
                eval(temp{i}+".visible_to_user = [0,0];");
            }
            warning_elements = warning_elements + " "+temp{i};       
        }  
    }
} 

# Old notes
note_count=0;
for(i=1:10) {
    if(exist("note_" + num2str(i))==1){
        note_count=note_count+1;  
    }
}
if (note_count!=0){
    notes=cell(note_count);
    for (i=1:note_count){
        notes{i}=struct;
        eval('notes{'+num2str(i)+'}.property = note_' + num2str(i) + '.property;');
        eval('notes{'+num2str(i)+'}.value = note_' + num2str(i) + '.value;');
        eval('clear(note_'+ num2str(i)+');');
    }
    warning_elements = warning_elements + " notes";
}

if(!exist("Ppi_power1")){
    if(!exist("IV")){
        IV = [-100,-100/R; 0,0 ; 100,100/R];
    }
    Ppi_current1 = interp(IV(:,2),IV(:,1),Ppi_voltage1);
    Ppi_current2 = interp(IV(:,2),IV(:,1),Ppi_voltage2);
    Ppi_power1 = Ppi_current1*Ppi_voltage1;
    Ppi_power2 = Ppi_current2*Ppi_voltage2;
    warning_elements = warning_elements + " Ppi_power1";   
}
if (warning_elements!= ""){
    backward_warning = backward_warning+ "\n           WARNING: Following data are in an old format or do not exist:\n          "+ warning_elements+endl+"           This format may not be supported in the future. Please refer to the documentation and update the data format.\n          "+endl;
}

