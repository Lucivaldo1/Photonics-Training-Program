# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.
if (exist("source_directory")){
    if (source_directory!=filedirectory(filedirectory(which(currentscriptname)))){
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/phase_shifter_thermal_init_qa.lsf");
    }
}else{
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/phase_shifter_thermal_init_qa.lsf");      
}
err=error_count;

# Build and run Vpi_Lpi tests for all supported modes
for(mode_ind = 1: N_modes){
    new;

    # 0. set up the simulation parameters in Root Element
    groupscope("::Root Element"); #return to root
    set("monitor data", "save to memory");
    set("sample rate", sample_rate);

    # 1. Build test circuits
    fspan=sample_rate;

    addelement("Optical Network Analyzer");
    ONA1_name = get("name");
    set("x position", -390);
    set("y position", -115);
    set("input parameter", "center and range");
    set("plot kind", "wavelength");
    set("center frequency", c/Operating_Wavelength);
    set("frequency range", fspan);
    set("number of points", 3);
    set("orthogonal identifier", mode_data{mode_ind}.ID);
    set("number of input ports", V_num);
    set("peak analysis","center");

    addelement("Optical Splitter");
    Split1_name = get("name");
    set("x position", -200);
    set("y position", 100);
    set("number of ports", V_num); ##
    set("split ratio","none"); ##

    addelement("DC Source");
    DC1_name = get("name");
    set("x position", -140);
    set("y position", -185);
    set("amplitude",0);

    connect(ONA1_name,"output",Split1_name,"input");

    V_test = linspace(Ppi_voltage1(mode_ind), Ppi_voltage2(mode_ind), V_num);
    DUT1_name_cell = cell(V_num);
    DC2_name_cell = cell(V_num);

    for (DUT1_num = 1:V_num){
        addelement(design_kit_name + model);
        if(exist("container_selection_code")) { eval(container_selection_code); }
        DUT1_name_cell{DUT1_num} = get("name");
        set("x position", 0);
        set("y position", 200*(DUT1_num-1));

        addelement("DC Source");
        DC2_name_cell{DUT1_num} = get("name");
        set("x position", 200);
        set("y position", 200*(DUT1_num-1));
        if(isDoubleHeater){
            set("amplitude",V_test(DUT1_num));
        }
        else{
            set("amplitude",V_test(DUT1_num));
        }

        connect(Split1_name,"output "+num2str(DUT1_num),DUT1_name_cell{DUT1_num},ports{opt_1_RELAY}.name);
        connect(ONA1_name,"input "+num2str(DUT1_num),DUT1_name_cell{DUT1_num},ports{opt_2_RELAY}.name);
        connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_g1_RELAY}.name);
        connect(DC2_name_cell{DUT1_num},"output",DUT1_name_cell{DUT1_num},ports{ele_h1_RELAY}.name);

        if(isDoubleHeater){
            connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_g2_RELAY}.name);
            connect(DC2_name_cell{DUT1_num},"output",DUT1_name_cell{DUT1_num},ports{ele_h2_RELAY}.name);
        }
    }

    # 2. Run the simulation
    if(exist("stat_parameters")){
        selectpartial(prefix);
        set("perturb_stat_params",0);  # flag to set all stat_prameters to zero for comparison with target values
    }
    run;

    # 3. Get result of Ppi test
    angle_Ppi = matrix(V_num);

    for (DUT1_num = 1:V_num){
        angle_result = getresult(ONA1_name,"input "+num2str(DUT1_num)+"/mode 1/peak/angle");
        angle_Ppi(DUT1_num) = angle_result.getattribute(getattribute(angle_result));
    }

    angle_Ppi = unwrap(angle_Ppi);
    P_test = V_test * interp(IV(:,2),IV(:,1),V_test);
    dP_dphase = (P_test(V_num) - P_test(1))/(angle_Ppi(V_num)-angle_Ppi(1));
    Ppi_test = dP_dphase*pi;

    if (create_plots){
        title = model+"_phase_shift";
        plot(P_test*1000,(angle_Ppi-angle_Ppi(1))/pi, "Heater Input Power (mW)", "Phase Shift (pi)", title);
        legend(mode_data{mode_ind}.name);

    }

    msg = "Ppi "+  mode_data{mode_ind}.name+ " is "+num2str(1e3*Ppi_test)+"mW and it should be "+num2str(1e3*Ppi(mode_ind))+"mW";
    change = abs((Ppi_test-Ppi(mode_ind))/Ppi(mode_ind));
    pass = change < Ppi_rel_tolerance;
    if(!pass) {
        ?msg;
        error_count = error_count+1;
    }
    assert(msg,pass);
    if(break_at_failure & !pass) { break; }
    
}
if (err==error_count){
    ?filebasename(currentscriptname)+" test passed.";
}