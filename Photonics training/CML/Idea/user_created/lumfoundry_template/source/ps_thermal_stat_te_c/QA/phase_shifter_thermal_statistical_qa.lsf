# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.

sample_rate = 100e9; # reset the sample to low since it was increased for BW test
if (exist("source_directory")){
    if (source_directory!=filedirectory(filedirectory(which(currentscriptname)))){
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/phase_shifter_thermal_init_qa.lsf");
    }
}else{
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/phase_shifter_thermal_init_qa.lsf");      
}
err=error_count;
    
if(exist("stat_parameters") and enable_stat_qa){
    stat_IL = matrix(2,N_trials);
    stat_Ppi = matrix(2,N_trials);
    stat_neff = matrix(2,N_trials);
    stat_ng = matrix(2,N_trials);
        
    # sweep for modes
    for (mode_ind = 1: N_modes) {
        
        ? endl + "Testing statistical behavior for mode " + num2str(mode_ind) + ": " + mode_data{mode_ind}.name;
        
        # IL, neff, ng statistical qa
        new;
        
        # neff, ng circuit
        
        addelement(design_kit_name + model);
        if(exist("container_selection_code")) { eval(container_selection_code); }
        DUT1_name = get("name");
        set("x position", -728);
        set("y position", 69);
        neff_ref = neff(mode_ind);
        L_eff = 30*central_wavelength/neff_ref;
        setnamed(DUT1_name, wg_length_name, L_eff);     

        addelement("Waveguide Y Branch");
        Y1_name = get("name");
        set("x position", -900);
        set("y position", 150);
        set("orthogonal identifier 1", mode_data{mode_ind}.ID);
        set("label 1",mode_data{mode_ind}.name);

        addelement("Waveguide Y Branch");
        Y2_name = get("name");
        set("horizontal flipped",1);
        set("x position", -560);
        set("y position", 150);
        set("orthogonal identifier 1", mode_data{mode_ind}.ID);
        set("label 1",mode_data{mode_ind}.name);

        addelement("DC Source");
        DC1_name = get("name");
        set("x position", -626);
        set("y position", -106);
        set("amplitude",0);
        
        addelement("Optical Network Analyzer");
        ONA1_name = get("name");
        set("x position", 0);
        set("y position", 400);
        set("input parameter", "center and range");
        set("plot kind", "frequency");
        set("center frequency", central_frequency);
        set("frequency range", 100000e9);
        set("number of points", 10000);
        set("orthogonal identifier", mode_data{mode_ind}.ID);
        set("number of input ports", 1);
        set("peak analysis","multiple");
        
        connect(ONA1_name,"output",Y1_name,"port 1");
        connect(Y1_name,"port 2", DUT1_name, ports{opt_1_RELAY}.name);
        connect(Y2_name,"port 2", DUT1_name, ports{opt_2_RELAY}.name);
        connect(Y1_name,"port 3", Y2_name, "port 3");
        connect(ONA1_name,"input 1",Y2_name,"port 1");
        connect(DC1_name,"output",DUT1_name,ports{ele_h1_RELAY}.name);
        connect(DC1_name,"output",DUT1_name,ports{ele_g1_RELAY}.name);

        if(isDoubleHeater){
            connect(DC1_name,"output",DUT1_name,ports{ele_h2_RELAY}.name);
            connect(DC1_name,"output",DUT1_name,ports{ele_g2_RELAY}.name);
        }
        
        # IL circuit
        
        # 0. setup the simulation paratmeters in Root Element
        groupscope("::Root Element"); #return to root
        set("monitor data", "save to memory");
        set("sample rate", sample_rate);


        # 1. Build circtuis for IL test
        addelement(design_kit_name + model);
        if(exist("container_selection_code")) { eval(container_selection_code); }
        DUT3_name = get("name");
        local_path=get("local path");
        set("x position", 290);
        set("y position", -400);

        addelement("DC Source");
        DC4_name = get("name");
        set("x position", 290);
        set("y position", -580);
        set("amplitude",0);

        fspan=sample_rate;

        addelement("Optical Network Analyzer");
        ONA2_name = get("name");
        set("x position", 15);
        set("y position", -580);
        set("input parameter", "center and range");
        set("plot kind", "wavelength");
        set("center frequency", c/Operating_Wavelength);
        set("frequency range", fspan);
        set("orthogonal identifier", mode_data{mode_ind}.ID);
        set("number of input ports", 1);
        set("peak analysis","center");

        connect(ONA2_name,"output",DUT3_name,ports{opt_1_RELAY}.name);
        connect(ONA2_name,"input 1",DUT3_name,ports{opt_2_RELAY}.name);
        connect(DC4_name,"output",DUT3_name,ports{ele_h1_RELAY}.name);
        connect(DC4_name,"output",DUT3_name,ports{ele_g1_RELAY}.name);

        if(isDoubleHeater){
            connect(DC4_name,"output",DUT3_name,ports{ele_h2_RELAY}.name);
            connect(DC4_name,"output",DUT3_name,ports{ele_g2_RELAY}.name);
        }

   
        # get .lib filename
        dotlib_filename = importlib;
        if (length(dotlib_filename)==0){ #in case the element is in the subfolder
            libname=splitstring(library_name,"::");
            if (fileexists(filedirectory(local_path)+"/"+libname{1}+'.lib')){
                dotlib_filename=filedirectory(local_path)+"/"+libname{1}+".lib";
            }else{
                dotlib_filename=filedirectory(local_path)+"/"+libname{1}+".lib.x";   
            }}
        
        # create MC sweep
        addsweep(2);
        MC_name = "mc_sweep";
        setsweep("Monte Carlo analysis", "name", MC_name);
        setsweep(MC_name, "number of trials", N_trials);
        setsweep(MC_name, "batch size", 10);
        setsweep(MC_name, "enable seed", 1);
        setsweep(MC_name, "seed", 1);
        setsweep(MC_name, "enable spatial correlations", 0);
        
        # define the parameter mc_lib
        mc_lib = struct;
        mc_lib.Name = "mc_lib";
        mc_lib.library = dotlib_filename;
        mc_lib.Variant = "statistical";
        addsweepparameter(MC_name,mc_lib);
            
        mc_result_loss = struct;
        mc_result_loss.Name = "IL";
        mc_result_loss.Result = "::Root Element::IL";
        mc_result_loss.Estimation = false;

        mc_result_neff = struct;
        mc_result_neff.Name = "neff";
        mc_result_neff.Result = "::Root Element::neff";
        mc_result_neff.Estimation = false;
        
        mc_result_ng = struct;
        mc_result_ng.Name = "ng";
        mc_result_ng.Result = "::Root Element::ng";
        mc_result_ng.Estimation = false;
        
        addsweepresult(MC_name,mc_result_neff);
        addsweepresult(MC_name,mc_result_ng); 
        addsweepresult(MC_name,mc_result_loss);
        
        # add results to the Root Element
        groupscope("::Root Element");
        analysis_script = '
        T_3 = getresult("' + ONA2_name + '","input 1/mode 1/transmission");
        IL_test = -10*log10(mean(abs(T_3.getattribute("' + mode_data{mode_ind}.name + ' transmission")))^2);  # dB/m

        setresult("IL",IL_test);

        FSR = getresult("' + ONA1_name + '","input 1/mode 1/peak/free spectral range");
        data_type = "' + mode_data{mode_ind}.name + '"+ " free spectral range (Hz)";
        fsr = FSR.getattribute(data_type);
        fsr = mean(fsr);
        ng = c/fsr/' + num2str(L_eff) + ';
        setresult("ng",ng);
        
        central_frequency = ' + num2str(central_frequency) + ';
        peak_frequencies = getresult("' + ONA1_name + '","input 1/mode 1/peak/frequency");
        peak_wavelength = c/peak_frequencies(find(peak_frequencies,central_frequency));  # rough location of notch
        neff = peak_wavelength*30/' + num2str(L_eff) + ';
        setresult("neff",neff);
        ';
        
        set("analysis script",analysis_script);
        run;
        runanalysis;
        switchtodesign;
        save("statistical_temp");
        
        runsweep(MC_name);
        stat_neff(mode_ind,:) = getsweepdata(MC_name,"neff");
        stat_ng(mode_ind,:) = getsweepdata(MC_name,"ng");        
        stat_IL(mode_ind,:) = getsweepdata(MC_name,"IL");
        
        
        ## Ppi statistical QA

        if(enable_stat_Ppi_qa){
        # Manually run a MC sweep for Ntrial
        ?mode_data{mode_ind}.name + " mode: Ppi MC sweep trials: ";
        for (i= 1:N_trials){
            if(!mod(i,10)){?num2str(i);}
            new;
        
            # 0. set up the simulation parameters in Root Element
            groupscope("::Root Element"); #return to root
            set("monitor data", "save to memory");
            set("sample rate", sample_rate);

            # 1. Build test circuits
            fspan=sample_rate;

            addelement("Optical Network Analyzer");
            ONA1_name = get("name");
            set("x position", -390);
            set("y position", -115);
            set("input parameter", "center and range");
            set("plot kind", "wavelength");
            set("center frequency", c/Operating_Wavelength);
            set("frequency range", fspan);
            set("number of points", 3);
            set("orthogonal identifier", mode_data{mode_ind}.ID);
            set("number of input ports", V_num);
            set("peak analysis","center");

            addelement("Optical Splitter");
            Split1_name = get("name");
            set("x position", -200);
            set("y position", 100);
            set("number of ports", V_num); ##
            set("split ratio","none"); ##

            addelement("DC Source");
            DC1_name = get("name");
            set("x position", -140);
            set("y position", -185);
            set("amplitude",0);

            connect(ONA1_name,"output",Split1_name,"input");

            V_test = linspace(Ppi_voltage1(mode_ind), Ppi_voltage2(mode_ind), V_num);
            DUT1_name_cell = cell(V_num);
            DC2_name_cell = cell(V_num);

            for (DUT1_num = 1:V_num){
                if (DUT1_num == 1) {
                    addelement(design_kit_name + model);    # add first element
                    importlib(dotlib_filename,"statistical",{"seed":i});    # set up statistical parameter in first element
                }
                else{
                    select(DUT1_name_cell{1});
                    copy;    # copy the first element to use the same values for the statistical parameters
                }
                
                if(exist("container_selection_code")) { eval(container_selection_code); }
                DUT1_name_cell{DUT1_num} = get("name");
                set("x position", 0);
                set("y position", 200*(DUT1_num-1));

                addelement("DC Source");
                DC2_name_cell{DUT1_num} = get("name");
                set("x position", 200);
                set("y position", 200*(DUT1_num-1));
                if(isDoubleHeater){
                    set("amplitude",V_test(DUT1_num));
                }
                else{
                    set("amplitude",V_test(DUT1_num));
                }

                connect(Split1_name,"output "+num2str(DUT1_num),DUT1_name_cell{DUT1_num},ports{opt_1_RELAY}.name);
                connect(ONA1_name,"input "+num2str(DUT1_num),DUT1_name_cell{DUT1_num},ports{opt_2_RELAY}.name);
                connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_g1_RELAY}.name);
                connect(DC2_name_cell{DUT1_num},"output",DUT1_name_cell{DUT1_num},ports{ele_h1_RELAY}.name);

                if(isDoubleHeater){
                    connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_g2_RELAY}.name);
                    connect(DC2_name_cell{DUT1_num},"output",DUT1_name_cell{DUT1_num},ports{ele_h2_RELAY}.name);
                }
            }           
            
            # 2. Run the simulation
            run;
            
            # 3. Get the result
            angle_Ppi = matrix(V_num);

            for (DUT1_num = 1:V_num){
                angle_result = getresult(ONA1_name,"input "+num2str(DUT1_num)+"/mode 1/peak/angle");
                angle_Ppi(DUT1_num) = angle_result.getattribute(getattribute(angle_result));
            }

            angle_Ppi = unwrap(angle_Ppi);
            P_test = V_test * interp(IV(:,2),IV(:,1),V_test);
            dP_dphase = (P_test(V_num) - P_test(1))/(angle_Ppi(V_num)-angle_Ppi(1));
            stat_Ppi(mode_ind,i) = dP_dphase*pi;
        }
        }
        
        # Plot the results
        if(create_plots){
            histc(stat_IL(mode_ind,:));
            setplot("x label","IL (dB)"); setplot("y label","count"); setplot("title","N_trials = " + num2str(N_trials)); 
            legend(mode_data{mode_ind}.name + " mode");            
            histc(stat_Ppi(mode_ind,:));
            setplot("x label","Ppi (W)"); setplot("y label","count"); setplot("title","N_trials = " + num2str(N_trials)); 
            legend(mode_data{mode_ind}.name + " mode");
            histc(stat_neff(mode_ind,:));
            setplot("x label","neff"); setplot("y label","count"); setplot("title","N_trials = " + num2str(N_trials)); 
            legend(mode_data{mode_ind}.name + " mode"); 
            histc(stat_ng(mode_ind,:));
            setplot("x label","ng"); setplot("y label","count"); setplot("title","N_trials = " + num2str(N_trials)); 
            legend(mode_data{mode_ind}.name + " mode");
        }

        # delete temporary project file
        try{
            del("statistical_temp.icp");
        }catch(ErrMsg);

        if(length(ErrMsg)!=0){
            ?"Failed to remove temporary project file for statistical QA due to 'Safe Mode' operation in Interconnect. For more information check online documentation on 'Safe Mode'.";
        }

    }
    
    ### Reference data comparison
    
    # Check reference data for testing:
    if(!stat_reference_data_available){
        msg = "Statistical regression QA test is skipped. Saving statistical reference data in " + foldername_ref;
        assert(msg,false);
        error_count = error_count+1;
        stat_IL_ref = stat_IL;
        stat_Ppi_ref = stat_Ppi;
        stat_neff_ref = stat_neff;
        stat_ng_ref = stat_ng;
        
        current_directory = pwd;
        cd(foldername_ref);
        matlabsave(filename_ref, stat_IL_ref, stat_Ppi_ref, stat_neff_ref, stat_ng_ref);
        cd(current_directory);
        
        ?"******* Saved statistical reference data";
    }else{
        # Compare with reference data
        ?"Testing Monte-Carlo sweep results against reference data";
    
    current_directory = pwd;
    cd(foldername_ref);
    try{
        matlabload(filename_ref_stat);
    }  catch(errMsg);
    cd(current_directory);
    if (errMsg !=''){
        msg=filename_ref+".mat does not exist in "+foldername_ref;
        assert(msg,0);
        error_count = error_count+1;
        
    }else{
        change_IL = max(abs(stat_IL_ref-stat_IL));
        msg = "IL (dB) from MC analysis has a maximum variation of " + num2str(change_IL) + " compared to reference. Variation should be less than " + num2str(stat_IL_tolerance);
        pass = change_IL <= stat_IL_tolerance;
        if(!pass) {
            ? "ERROR - insertion loss (IL) in statistical QA";
            error_count = error_count+1;
        }
        assert(msg,pass);
        if(break_at_failure & !pass) { break; }

        change_Ppi = max(abs(stat_Ppi_ref-stat_Ppi));
        msg = "Ppi (W) from MC analysis has a maximum variation of " + num2str(change_Ppi) + " compared to reference. Variation should be less than " + num2str(stat_Ppi_tolerance);
        pass = change_Ppi <= stat_Ppi_tolerance;
        if(!pass) {
            ? "ERROR - Ppi (W) in statistical QA";
            error_count = error_count+1;
        }
        assert(msg,pass);
        if(break_at_failure & !pass) { break; }  

        change_neff = max(abs(stat_neff_ref-stat_neff));
        msg = "neff from MC analysis has a maximum variation of " + num2str(change_neff) + " compared to reference. Variation should be less than " + num2str(stat_neff_tolerance);
        pass = change_neff <= stat_neff_tolerance;
        if(!pass) {
            ? "ERROR - neff in statistical QA";
            error_count = error_count+1;
        }
        assert(msg,pass);
        if(break_at_failure & !pass) { break; }
        
        change_ng = max(abs(stat_ng_ref-stat_ng));
        msg = "ng from MC analysis has a maximum variation of " + num2str(change_ng) + " compared to reference. Variation should be less than " + num2str(stat_ng_tolerance);    
        pass = change_ng <= stat_ng_tolerance;
        if(!pass) {
            ? "ERROR - ng in statistical QA";
            error_count = error_count+1;
        }
        assert(msg,pass);
        if(break_at_failure & !pass) { break; } 
        if (err==error_count){
            ?filebasename(currentscriptname)+" test passed.";
        } 
        
    }
    }

}

else if(enable_stat_qa){
    ?"No statistical data. Skipped statistical QA.";
}else{
    ?"Test-bench is not applicable to this element. "+ filebasename(currentscriptname)+" did not run!";
}