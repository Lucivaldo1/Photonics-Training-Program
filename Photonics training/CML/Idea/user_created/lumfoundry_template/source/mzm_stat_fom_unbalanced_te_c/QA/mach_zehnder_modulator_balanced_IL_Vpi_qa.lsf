# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.
# IL and Vpi QA for balanced MZMs
# Test circuit 1a: Vpi
if (exist("source_directory")){
    if (source_directory!=filedirectory(filedirectory(which(currentscriptname)))){
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/mach_zehnder_modulator_init_qa.lsf");
    }
}else{
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/mach_zehnder_modulator_init_qa.lsf");      
}
err=error_count;

if (!unbalanced_MZM){
    if(mzm_electrical) {
        V_test = linspace(Vpi_electrical_voltage1, Vpi_electrical_voltage2, V_num);
        V_num_original = V_num;
        
        length_scale_factor = 1;
        V_sign = (Vpi_electrical_voltage2-Vpi_electrical_voltage1)/abs(Vpi_electrical_voltage2-Vpi_electrical_voltage1);
            
        if(abs(Vpi_electrical) >= abs(Vpi_electrical_voltage2 -  Vpi_electrical_voltage1)){
            # If the Vpi for the device is larger than (or equal to) the allowed bias range 
            # then make the length larger for QA purpose and add extra bias points at the end for a finer voltage grid near Vpi
            length_scale_factor = abs(Vpi_electrical) / abs(Vpi_electrical_voltage2 -  Vpi_electrical_voltage1) * 1.01;
            V_fine_range = min([abs(V_test(V_num)-V_test(V_num-1)), 0.04/length_scale_factor*abs(Vpi_electrical_voltage2-Vpi_electrical_voltage1)]);
            V_test = [V_test(1:V_num-1);linspace(Vpi_electrical_voltage2-V_sign*V_fine_range,Vpi_electrical_voltage2,5)];
            V_num = V_num+4;
        }
        else{
            # If Vpi is smaller than the bias range then add extra points near Vpi to increase accuracy of finding the minima
            V_fine_range = min([abs(V_test(V_num)-V_test(V_num-1)), 0.04*abs(Vpi_electrical_voltage2-Vpi_electrical_voltage1)]);
            V_near_Vpi = find(V_test<=V_sign*abs(Vpi_electrical)+V_fine_range/2 & V_test>=V_sign*abs(Vpi_electrical)-V_fine_range/2);
            if(V_near_Vpi == 0){
                Vtemp1 = find(V_test>-abs(Vpi_electrical));
                Vtemp2 = find(V_test<-abs(Vpi_electrical));
                V_test = [V_test(1:Vtemp1(end)) ; linspace(V_sign*abs(Vpi_electrical)-V_sign*V_fine_range/2,V_sign*abs(Vpi_electrical)+V_sign*V_fine_range/2,5) ; V_test(Vtemp2(1):end)];
                V_num = V_num+5;
            }
            else{
                V_test = [V_test(1:V_near_Vpi-1) ; linspace(V_sign*abs(Vpi_electrical)-V_sign*V_fine_range/2,V_sign*abs(Vpi_electrical)+V_sign*V_fine_range/2,5) ; V_test(V_near_Vpi+1:end)];
                V_num = V_num+4;
            }
        } 
    }    
    new;
    groupscope("::Root Element"); #return to root
    set("sample rate", sample_rate);


    fspan=sample_rate;
    if(mzm_electrical) {
    addelement("Optical Network Analyzer");
    ONA1_name = get("name");
    set("x position", -390);
    set("y position", -115);
    set("input parameter", "center and range");
    set("plot kind", "wavelength");
    set("center frequency", c/Operating_Wavelength);
    set("frequency range", fspan);
    set("number of points", 3);
    set("orthogonal identifier", mode_data{1}.ID);
    set("number of input ports", V_num);
    set("peak analysis","center");
    addelement("Optical Splitter");
    Split1_name = get("name");
    set("x position", -200);
    set("y position", 100);
    set("number of ports", V_num); ##
    set("split ratio","none"); ##
    addelement("DC Source");
    DC1_name = get("name");
    set("x position", -140);
    set("y position", -185);
    set("amplitude",0);

    connect(ONA1_name,"output",Split1_name,"input");        

    V_zero = find(V_test == 0);
    DUT1_name_cell = cell(V_num);
    DC2_name_cell = cell(V_num);
    for (DUT1_num = 1:V_num){
        addelement(design_kit_name + model);
        if(exist("container_selection_code")) { eval(container_selection_code); }
        DUT1_name_cell{DUT1_num} = get("name");
        set("x position", 0);
        set("y position", 200*(DUT1_num-1));

        # If the Vpi for the device is larger than (or equal to) the allowed bias range 
        # then make the length larger for QA purpose
        if(abs(Vpi_electrical) >= abs(Vpi_electrical_voltage2 -  Vpi_electrical_voltage1)){
            set(wg_length.name,wg_length.default * length_scale_factor);
        }
        addelement("DC Source");
        DC2_name_cell{DUT1_num} = get("name");
        set("x position", 200);
        set("y position", 200*(DUT1_num-1));
        if(bias_node=="anode"){set("amplitude",V_test(DUT1_num));}
        if(bias_node=="cathode"){set("amplitude",-V_test(DUT1_num));}

        connect(Split1_name,"output "+num2str(DUT1_num),DUT1_name_cell{DUT1_num},ports{opt_1_RELAY}.name);

        connect(ONA1_name,"input "+num2str(DUT1_num),DUT1_name_cell{DUT1_num},ports{opt_2_RELAY}.name);

        try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_th_1_RELAY}.name);}catch(blank);
        try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_th_2_RELAY}.name);}catch(blank);
        try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_th_3_RELAY}.name);}catch(blank);
        try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_th_4_RELAY}.name);}catch(blank);
        try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_an_2_RELAY}.name);}catch(blank);
        try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_cat_2_RELAY}.name);}catch(blank);
        if(bias_node=="anode"){
            try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_cat_1_RELAY}.name);}catch(blank);
            try{connect(DC2_name_cell{DUT1_num},"output",DUT1_name_cell{DUT1_num},ports{ele_an_1_RELAY}.name);}catch(blank);
        }
        if(bias_node=="cathode"){
            try{connect(DC1_name,"output",DUT1_name_cell{DUT1_num},ports{ele_an_1_RELAY}.name);}catch(blank);
            try{connect(DC2_name_cell{DUT1_num},"output",DUT1_name_cell{DUT1_num},ports{ele_cat_1_RELAY}.name);}catch(blank);
        }
    }
}
    # Test circuit 1b: IL

    addelement("Optical Network Analyzer");
    ONA2_name = get("name");
    set("x position", 400);
    set("y position", -115);
    set("input parameter", "center and range");
    set("plot kind", "wavelength");
    set("center frequency", c/Operating_Wavelength);
    set("frequency range", fspan);
    set("number of points", 3);
    set("orthogonal identifier", mode_data{1}.ID);  

    addelement("DC Source");
    DC3_name = get("name");
    set("x position", 600);
    set("y position", -185);
    set("amplitude",0);

    addelement(design_kit_name + model);
    if(exist("container_selection_code")) { eval(container_selection_code); }
    DUT2_name = get("name");
    set("x position", 600);
    set("y position", 100);

    connect(ONA2_name,"output",DUT2_name,ports{opt_1_RELAY}.name);
    connect(ONA2_name,"input 1",DUT2_name,ports{opt_2_RELAY}.name);

    try{connect(DC3_name,"output",DUT2_name,ports{ele_th_1_RELAY}.name);}catch(blank);
    try{connect(DC3_name,"output",DUT2_name,ports{ele_th_2_RELAY}.name);}catch(blank);
    try{connect(DC3_name,"output",DUT2_name,ports{ele_th_3_RELAY}.name);}catch(blank);
    try{connect(DC3_name,"output",DUT2_name,ports{ele_th_4_RELAY}.name);}catch(blank);
    try{connect(DC3_name,"output",DUT2_name,ports{ele_an_2_RELAY}.name);}catch(blank);
    try{connect(DC3_name,"output",DUT2_name,ports{ele_cat_2_RELAY}.name);}catch(blank);
    try{connect(DC3_name,"output",DUT2_name,ports{ele_cat_1_RELAY}.name);}catch(blank);
    try{connect(DC3_name,"output",DUT2_name,ports{ele_an_1_RELAY}.name);}catch(blank);

    if(exist("stat_parameters")){
        selectpartial(prefix);
        set("perturb_stat_params",0);  # flag to set all stat_prameters to zero for comparison with target values
    }
    run;

    

    # Test result 1: IL, Vpi

    # find the minima in IL to calculate Vpi
    if(mzm_electrical) {
        IL_dB = matrix(V_num,3);
        IL_test = matrix(V_num);
        
        for (DUT1_num = 1:V_num){
            gain_result = getresult("ONA_1","input "+num2str(DUT1_num)+"/mode 1/gain");
            lambda = gain_result.wavelength;
            gain_result = gain_result.getattribute("TE gain (dB)");
            IL_dB(DUT1_num,:) = gain_result;
            T_result = getresult("ONA_1","input "+num2str(DUT1_num)+"/mode 1/transmission");
            T_result = T_result.getattribute("TE transmission");
            IL_test(DUT1_num) = T_result(2);
        }
        temp = findpeaks(-abs(IL_test)^2,10);
        Vpi_test = abs(V_test(temp(1)))*length_scale_factor;
        
        #if(abs(Vpi_test)<1e-10){
        #p_extrapol = polyfit(V_test((end-1):end),abs(IL_test((end-1):end))^2,1);
        #Vpi_test = -p_extrapol(1)/p_extrapol(2);
        #Vpi_test = -Vpi_test; #additional minus sign because voltage is applied to cathode.
        #}
        
        if (create_plots){
            plot(V_test, IL_dB(:,2), "Bias [V]", "IL [dB]", model+" Vpi test");
            legend("");
            if(length_scale_factor>1){
                setplot("title",wg_length.name+" scaled by a factor of "+num2str(length_scale_factor));
            }
        }
        
        msg = "Vpi is "+num2str(Vpi_test)+" V and it should be "+num2str(abs(Vpi_electrical))+" V";
        change = abs(Vpi_test-abs(Vpi_electrical))/abs(Vpi_electrical);
        pass = change < Vpi_electrical_tolerance;
        if(!pass) {
            ?msg;
            error_count = error_count+1;
        }
        assert(msg,pass);
        if(break_at_failure & !pass) { break; }
                        
        V_num = V_num_original;  # reset V_num
    }

    gain = getresult(ONA2_name,"input 1"+"/mode 1/gain");
    gain = gain.getattribute("TE gain (dB)");

    msg = "IL is "+num2str(abs(gain(2)))+" dB and it should be "+num2str(IL)+" dB";
    change = abs(abs(gain(2))-IL)/abs(IL);
    pass = change < IL_tolerance;
    if(!pass) {
        ?msg;
        error_count = error_count+1;
    }
    assert(msg,pass);
    if(break_at_failure & !pass) { break; }
    if (err==error_count){
        ?filebasename(currentscriptname)+" test passed.";
    }    
}else{
    ?"Test-bench is not applicable to this element. "+ filebasename(currentscriptname)+" did not run!";
}