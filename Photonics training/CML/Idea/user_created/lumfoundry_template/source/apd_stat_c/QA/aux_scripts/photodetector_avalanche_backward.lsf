##################################################################

# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.

# Unauthorized use, distribution, or duplication is prohibited.
# This product is subject to U.S. laws governing export and re-export.

# For full Legal Notice, see documentation.

##################################################################
warning_elements = "";
backward_warning="";
backward_error="";

### New Data Format ###

if (exist("general")){
    description=general.description;
    prefix=general.prefix;
    notes=general.notes;
    clear(general);
}
if (isstruct(ports)){
    new_ports=ports;
    strPorts=splitstring(getfield(new_ports),endl);
    plen=length(strPorts);
    fplen=0;
    if (plen!=0){
        for (p=1:plen){
            eval("fpexists=isfield(new_ports,'floating_port_"+num2str(p)+"');");
            if (fpexists==1){
                if (p!=fplen+1){
                    backward_error=backward_error+"Floating port names are not consistent. Please check the source data.";
                    break;
                }else{
                    fplen=fplen+1;
                }
            }
        }
    }

    pord=matrix(1,plen);
    for (p=1:plen){ # if one port has "order" field, all of the ports have to have a "order" filed.
        eval("ordexists=isfield(new_ports."+strPorts{p}+", 'order');"); 
        if (ordexists==1){
            eval("pord(1,"+num2str(p)+")=new_ports."+strPorts{p}+".order;"); 
        }else{
            pord(1,p)=0;
        }
    }

    if ( (find(pord==0)!=0)  or max(pord)>plen){
        if (sum(pord)!=0){
            backward_warning=backward_warning+"\n           Port order is not defined properly for all the ports. Please check the source data. Default port order will be used!";
        }
        orderexists=0;
    }else{
        orderexists=1;
    }
    
    for (po=1:length(pord)){
        if (pord(po)!=1){
            if (find(pord==pord(po)-1)==0){
                if (orderexists==1){
                    backward_warning=backward_warning+"\n           Port order is not defined properly for all the ports. Please check the source data. Default port order will be used!";
                    orderexists=0;            
                } 
            }
        }
    }
    
    if (orderexists==1){
        ports=cell(length(unique(pord)));
    }else{
        ports=cell(plen);
    }
    
    for (p=1:plen){
        fport=0;
        for (fp=(1:fplen)){
            fname="floating_port_"+num2str(fp);
            if (fname==strPorts{p}){
                fport=1;
            }
        }
        if (orderexists==1){
            eval("ord=new_ports."+strPorts{p}+".order;");
        }else{
            ord=p;
        }
        ports{ord}=struct;
        eval("ports{"+num2str(ord)+"}=new_ports."+strPorts{p}+";");
        if (strPorts{p}=="opt_1" or strPorts{p}=="opt_2"){
            ports{ord}.type="Optical Signal";
        }else{
            ports{ord}.type="Electrical Signal";
        }
        if (fport!=1){
            eval(strPorts{p}+"_RELAY="+num2str(ord)+";");
        }
    }
    clear(new_ports);
}


if (exist("parameters")){
    temperature=parameters.temperature.default;
    if (isfield(parameters,"thermal_noise")){
        thermal_noise=parameters.thermal_noise.default;
        if (isfield(parameters.thermal_noise,"min")){thermal_noise_min = parameters.thermal_noise.min;}
        if (isfield(parameters.thermal_noise,"max")){thermal_noise_max = parameters.thermal_noise.max;}
    }
    clear(parameters);
}

if (exist("model_data")){
    photonic_model=model_data.photonic_model;

    #electrical_bandwidth
    if (isfield(model_data,"bandwidth_data")){
        BW_data = struct;
        BW_data.default_value=matrix(length(model_data.bandwidth_data.voltage),2);
        BW_data.default_value(:,1)=model_data.bandwidth_data.voltage;
        BW_data.default_value(:,2)=model_data.bandwidth_data.bandwidth;
    }
    #Idark
    if (isfield(model_data,"Idark_data")){
        Idark_data=struct;
        Idark_data.default_value=model_data.Idark_data;
    }
    #Resp
    if (isfield(model_data,"resp_data")){
        Resp_data = struct;
        Resp_data.default_value=matrix(length(model_data.resp_data.frequency),2);
        Resp_data.default_value(:,1)=model_data.resp_data.frequency;
        Resp_data.default_value(:,2)=model_data.resp_data.responsivity;
    }
    #ionization ratio
    if (isfield(model_data,"ionization_ratio_data")){
        ionization_ratio=matrix(length(model_data.ionization_ratio_data.voltage),2);
        ionization_ratio(:,1)=model_data.ionization_ratio_data.voltage;
        ionization_ratio(:,2)=model_data.ionization_ratio_data.ionization_ratio;
    }
    #M_data
    if (isfield(model_data,"M_data")){
        M_data = struct;
        M_data.default_value=matrix(length(model_data.M_data.voltage),length(model_data.M_data.optical_power));
        M_data.default_value(:,:) = model_data.M_data.M;
        M_data.voltage=matrix(length(model_data.M_data.voltage),1);
        M_data.voltage(:,:) = model_data.M_data.voltage;
        M_data.optical_power=matrix(length(model_data.M_data.optical_power),1);
        M_data.optical_power(:,:) = model_data.M_data.optical_power;
    }
    # equivalent circuit
    if (isfield(model_data,"elec_eq_ckt_data")){
        if (isfield(model_data.elec_eq_ckt_data,"Rs")){
            Rs=struct;
            Rs.default_value=model_data.elec_eq_ckt_data.Rs;}
    }
    if (isfield(model_data,"elec_eq_ckt_data")){
        if (isfield(model_data.elec_eq_ckt_data,"Cp")){
            Cp=struct;
            Cp.default_value=model_data.elec_eq_ckt_data.Cp;}
    }
    if (isfield(model_data,"elec_eq_ckt_data")){
        if (isfield(model_data.elec_eq_ckt_data,"Rp")){
            Rp=struct;
            Rp.default_value=model_data.elec_eq_ckt_data.Rp;}
    }
    if (isfield(model_data,"elec_eq_ckt_data")){
        if (isfield(model_data.elec_eq_ckt_data,"Ca")){
            Ca=struct;
            Ca.default_value=model_data.elec_eq_ckt_data.Ca;}
    }
    if (isfield(model_data,"elec_eq_ckt_data")){
        if (isfield(model_data.elec_eq_ckt_data,"Rd_data")){
            Rd_data=struct;
            Rd_data.default_value=matrix(length(model_data.elec_eq_ckt_data.Rd_data.voltage),2);
            Rd_data.default_value(:,1)=model_data.elec_eq_ckt_data.Rd_data.voltage;
            Rd_data.default_value(:,2)=model_data.elec_eq_ckt_data.Rd_data.res;
            }
    }
    if (isfield(model_data,"elec_eq_ckt_data")){
        if (isfield(model_data.elec_eq_ckt_data,"Rl_data")){
            Rl_data=struct;
            Rl_data.default_value=matrix(length(model_data.elec_eq_ckt_data.Rl_data.voltage),2);
            Rl_data.default_value(:,1)=model_data.elec_eq_ckt_data.Rl_data.voltage;
            Rl_data.default_value(:,2)=model_data.elec_eq_ckt_data.Rl_data.res;
            }
    }
    if (isfield(model_data,"elec_eq_ckt_data")){
        if (isfield(model_data.elec_eq_ckt_data,"Ra_data")){
            Ra_data=struct;
            Ra_data.default_value=matrix(length(model_data.elec_eq_ckt_data.Ra_data.voltage),2);
            Ra_data.default_value(:,1)=model_data.elec_eq_ckt_data.Ra_data.voltage;
            Ra_data.default_value(:,2)=model_data.elec_eq_ckt_data.Ra_data.res;
            }
    }
    if (isfield(model_data,"elec_eq_ckt_data")){
        if (isfield(model_data.elec_eq_ckt_data,"La_data")){
            La_data=struct;
            La_data.default_value=matrix(length(model_data.elec_eq_ckt_data.La_data.voltage),2);
            La_data.default_value(:,1)=model_data.elec_eq_ckt_data.La_data.voltage;
            La_data.default_value(:,2)=model_data.elec_eq_ckt_data.La_data.ind;
            }
    }     

    if (isfield(model_data,"saturation_power_data")){saturation_power=model_data.saturation_power_data;}
    enable_power_saturation=model_data.enable_power_saturation;
    if (isfield(model_data,"enable_shot_noise")){enable_shot_noise=model_data.enable_shot_noise;}
    DC_operation_only=model_data.DC_operation_only;
    clear(model_data);
}
if (exist("QA")){
    if (isfield(QA.parameters,"wavelength")){wavelength_test=QA.parameters.wavelength;}
    if (isfield(QA.parameters,"voltage")){bias_voltage_test=QA.parameters.voltage;}
    if (isfield(QA.parameters,"optical_power")){optical_power_test=QA.parameters.optical_power;}
    if (isfield(QA,'relative_tolerances')){
        tols={"BW","Idark","Iph"};
        for (t=1:length(tols)) {
            eval("tolexist=isfield(QA.relative_tolerances,'"+tols{t}+"');");
            if (tolexist==1){
                eval(tols{t}+"_rel_tolerance=QA.relative_tolerances."+tols{t}+";");
            }
        }
    }
    clear(QA);
}

# statistical
if (exist("statistical")){
    if (isfield(statistical,"parameters")){
        statPars=splitstring(getfield(statistical.parameters),endl);
        if (length(statPars)!=0){
            stat_parameters=cell(length(statPars));
            for (p=1:length(statPars)){
                eval("stat_parameters{"+num2str(p)+"}=statistical.parameters."+statPars{p}+";");
                }
        }
    }
    if (isfield(statistical,"QA")){
        N_trials=statistical.QA.N_trials;
        enable_stat_qa=statistical.QA.enable_qa;
        stat_reference_data_available=statistical.QA.reference_data_available;
        stat_qa_bias=statistical.QA.parameters.voltage;
        stat_qa_optical_power=statistical.QA.parameters.optical_power;
        if (isfield(statistical.QA,'absolutet_tolerances')){
            stattols={"BW","Idark","Resp"};
            for (t=1:length(stattols)) {
                eval("stat_"+stattols{t}+"_tolerance=statistical.QA.absolute_tolerances."+stattols{t}+";");
            }
        }
    }
    clear(statistical);
}

### backward ###
temp = cell(4);
temp{1} = "Resp_data";
temp{2} = "BW_data";
temp{3} = "Idark_data";
temp{4} = "M_data";

# Old notes
note_count=0;
for(i=1:10) {
    if(exist("note_" + num2str(i))==1){
        note_count=note_count+1;  
    }
}
if (note_count!=0){
    notes=cell(note_count);
    for (i=1:note_count){
        notes{i}=struct;
        eval('notes{'+num2str(i)+'}.property = note_' + num2str(i) + '.property;');
        eval('notes{'+num2str(i)+'}.value = note_' + num2str(i) + '.value;');
        eval('clear(note_'+ num2str(i)+');');
    }
    warning_elements = warning_elements + " notes";
}

if(!exist("DC_operation_only")){
    DC_operation_only = false;
    warning_elements = warning_elements + " DC_operation_only";     
}

for (i=1:length(temp)){
    eval("exist_temp = exist('"+temp{i}+"');");
if(exist_temp){
        eval("FOM = " + temp{i} + ";");
        if(!isfield(FOM, 'default_value')){
            eval(temp{i}+"=struct;");
            eval(temp{i}+".default_value = FOM;");
            eval(temp{i}+".visible_to_user = 0;");
            warning_elements = warning_elements + " "+temp{i};                       
        }
        if(!isfield(FOM, 'visible_to_user')){   
            eval(temp{i}+".visible_to_user = 0;");
        }
    }
} 
if (warning_elements!= ""){
    backward_warning = backward_warning+ "\n           WARNING: Following data are in an old format or do not exist:\n          "+ warning_elements+endl+"           This format may not be supported in the future. Please refer to the documentation and update the data format.\n          "+endl;
}