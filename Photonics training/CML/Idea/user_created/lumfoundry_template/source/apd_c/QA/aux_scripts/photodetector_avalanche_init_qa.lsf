######################################################

# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.

######################################################
## CML information 
foundry_element="apd_c";
library_name="lumfoundry_template::Photodetectors";
jsonload('C:\Users\luciv\Documents\Lucivaldo\CML\Idea\user_created\lumfoundry_template/source\apd_c\apd_c.json');
feval('/aux_scripts/photodetector_avalanche_backward.lsf');
process_prefix="lum_";
model = process_prefix + 'apd_c';

# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.

####  Initializing variables [ DO NOT EDIT THIS SECTION ]

design_kit_name = '::design kits::' + library_name + "::";
error_count = 0;
#test_count = 0; # count how many tests have been run
break_at_failure = false;
create_plots = true;

if(exist("container_selection_code")){
    foldername_ref = source_directory;
    filename_ref = child_model+"_refdata";
}else{
    foldername_ref = foundry_directory+"/source/"+foundry_element;
    filename_ref = foundry_element+"_refdata";
}

if(exist("stat_parameters")) {
    if(exist("container_selection_code")){
        filename_ref_stat = child_model+"_stat_refdata";
    }else{
        filename_ref_stat = foundry_element+"_stat_refdata";
    }
}

temp = cell(3);
temp{1} = "Resp_data"; temp{2} = "BW_data";
temp{3} = "Idark_data";

for (i=1:length(temp)){
    eval("exist_temp = exist('"+temp{i}+"');");
if(exist_temp){
        eval("FOM = " + temp{i} + ";");
        if(isfield(FOM, 'default_value')){
            eval(temp{i}+" = FOM.default_value;");
        }
    }
} 

## if a second anode does not exist (in the source .lsf file)
#if(!exist("ele_an_2_RELAY")) {ele_an_2_RELAY = 0;}

## if a second optical port does not exist (in the source .lsf file)
#if(!exist("opt_2_RELAY")) {opt_2_RELAY = 0;}

# If user-defined test sample rate is unavailable (in the source .lsf file)
if(!exist("sample_rate_test")){
    sample_rate_test = 5e12; # Default value
}

if(!exist("DC_operation_only")){
    DC_operation_only =false;
}

if(!exist("stat_reference_data_available")){
    stat_reference_data_available = false;
}
if(!exist("enable_stat_qa")){
    enable_stat_qa = false;
}

if(!exist("optical_power_test")){
    optical_power_test = 0.001;
}


if(enable_stat_qa){
    if(!exist("N_trials")){
        ?"No user provided value for N_trials. Using default value of N_trials = 50.";
        N_trials = 50;
    }
    if(!exist("stat_qa_bias")){
        ?"No user provided value for stat_qa_bias. Using default value of stat_qa_bias = 0 V.";
        stat_qa_bias = 0;
    }    
    if(!exist('stat_Resp_tolerance')){
        ?"No user provided value for stat_Resp_tolerance. Using default value of stat_Resp_tolerance = 1e-3 A/W.";
        stat_Resp_tolerance = 1e-3; 
    }
    if(!exist('stat_BW_tolerance')){
        ?"No user provided value for stat_BW_tolerance. Using default value of stat_BW_tolerance = 0.01 GHz.";
        stat_BW_tolerance = 0.01e9; 
    }
    if(!exist('stat_Idark_tolerance')){
        ?"No user provided value for stat_M_tolerance. Using default value of stat_M_tolerance = 5.";
        stat_Idark_tolerance = 1e-9; 
    }
}