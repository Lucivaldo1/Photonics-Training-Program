##################################################################

# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.

##################################################################
warning_elements = "";
backward_warning="";
backward_error="";

### New Data Format ###
# ports
if (exist("general")){
    description=general.description;
    prefix=general.prefix;
    notes=general.notes;
    clear(general);
}
if (isstruct(ports)){
    strPorts=ports;
    port_labels={"opt_1","opt_2"};
    portexist=cell(length(port_labels));
    count=0;
    for (p=1:length(portexist)){
        eval("portexist{"+num2str(p)+"}=isfield(strPorts,'"+port_labels{p}+"');");
    }
    pco=find(portexist==1);
    plen=length(pco);

    pord=matrix(1,plen);
    for (p=1:length(pco)){ # if one port has "order" field, all of the ports have to have a "order" filed.
        eval("ordexists=isfield(strPorts."+port_labels{pco(p)}+", 'order');"); 
        if (ordexists==1){
            eval("pord(1,"+num2str(p)+")=strPorts."+port_labels{pco(p)}+".order;"); 
        }else{
            pord(1,p)=0;
        }
    }
    
    if ( (find(pord==0)!=0)  or max(pord)>plen){
        if (sum(pord)!=0){
            backward_warning=backward_warning+"\n           Port order is not defined properly for all the defined ports. Please check the source data. Default port order will be used!";
        }
        orderexists=0;
    }else{
        orderexists=1;
    }
    
    for (po=1:length(pord)){
        if (pord(po)!=1){
            if (find(pord==pord(po)-1)==0){
                if (orderexists==1){
                    backward_warning=backward_warning+"\n           Port order is not defined properly for all the defined ports. Please check the source data. Default port order will be used!";
                    orderexists=0;            
                } 
            }
        }
    }
    
    if (orderexists==1){
        ports=cell(length(unique(pord)));
    }else{
        ports=cell(plen);
    }

    for (p=1:length(pco)){
        if (orderexists==1){
            eval("ord=strPorts."+port_labels{pco(p)}+".order;");
        }else{
            ord=p;
        }
        ports{ord}=struct;
        eval("ports{"+num2str(ord)+"}=strPorts."+port_labels{pco(p)}+";");
        ports{ord}.type="Optical Signal";
        eval(port_labels{pco(p)}+"_RELAY="+num2str(ord)+";");

    }
    clear(strPorts); 
}

# parameters

if (exist("parameters")){
    par = getfield(parameters);
    par = splitstring(par,endl);
    for (i=1:length(par)){
        if (par{i} == "temperature"){
            temperature = parameters.temperature.default;
        }else{
            eval(par{i}+"=parameters."+par{i}+";");
            eval(par{i}+".default_value=parameters."+par{i}+".default;");
        }       
    }
    
    clear(parameters);
}

# model data
if (exist("model_data")){
    par = getfield(model_data);
    par = splitstring(par,endl);
    for (i=1:length(par)){
        if(par{i}=="temperature"){
            eval("temperature_data=model_data."+par{i}+";");
        }else{
            eval(par{i}+"=model_data."+par{i}+";");
        }
    }
}

# QA

if (exist("QA")){
    if (isfield(QA,'relative_tolerances')){
        par = getfield(QA.relative_tolerances);
        par = splitstring(par,endl);
        for (i=1:length(par)) {
            if (par{i}=="dpeakwavelength_dT_mainpol"){
                eval(par{i}+"_rel_tolerance=QA.relative_tolerances."+par{i}+";");
            }else{
                eval(par{i}+"_tolerance=QA.relative_tolerances."+par{i}+";");
            }
        }
    }
    if (isfield(QA,'absolute_tolerances')){
        par = getfield(QA.absolute_tolerances);
        par = splitstring(par,endl);
        for (i=1:length(par)) {
            eval(par{i}+"_tolerance=QA.absolute_tolerances."+par{i}+";");
        }
    }
    clear(QA);
}

# statistical
if (exist("statistical")){
    if (isfield(statistical,"parameters")){
        statPars=splitstring(getfield(statistical.parameters),endl);
        if (length(statPars)!=0){
            stat_parameters=cell(length(statPars));
            for (p=1:length(statPars)){
                eval("stat_parameters{"+num2str(p)+"}=statistical.parameters."+statPars{p}+";");
                }
        }
    }
    if (isfield(statistical,"QA")){
        N_trials = statistical.QA.N_trials; 
        if (isfield(statistical.QA,"VA_N_trials")){VA_N_trials = statistical.QA.VA_N_trials; }
        enable_stat_qa = statistical.QA.enable_qa; 
        stat_reference_data_available = statistical.QA.reference_data_available;
        if (isfield(statistical.QA,"VA_reference_data_available")){VA_stat_reference_data_available = statistical.QA.VA_reference_data_available;    }  
        stat_qa_wavelength = statistical.QA.parameters.wavelength;    

        if (isfield(statistical.QA,'absolute_tolerances')){
            par = getfield(statistical.QA.absolute_tolerances);
            par = splitstring(par,endl);
            for (i=1:length(par)) {
                eval("stat_"+par{i}+"_tolerance=statistical.QA.absolute_tolerances."+par{i}+";");
            }
        }
    }
    clear(statistical);
}

# Backward compatility scripts

if (exist("mode_no")) {
    peak_wavelength_mainpol=peak_wavelength_mainpol.mean;
    skew_mainpol=skew_mainpol.mean;
    bandwidth_1dB_mainpol=bandwidth_1dB_mainpol.mean ;
    dpeakwavelength_dT_mainpol=dpeakwavelength_dT_mainpol.mean;
    if (mode_no==1){
        mode_data=cell(1);
        mode_data{1} = struct;
        mode_data{1}.ID = 1;
        mode_data{1}.name = "num2str("+mode_label+")";
        eval("peak_IL_dB=peak_IL_("+mode_label+")_dB.mean");
        eval("R1_dB=R1_("+mode_label+")_dB.mean");
        eval("R2_dB=R2_("+mode_label+")_dB.mean");
    }
   if (mode_no==2){
        mode_data=cell(2);
        mode_data{1} = struct;
        mode_data{1}.ID = 1;
        mode_data{1}.name = "num2str("+mainpol_label+")";
        mode_data{2} = struct;
        mode_data{2}.ID = 2;
        mode_data{2}.name = "num2str("+secondarypol_label+")";
        mainpol_ID = 1 ;
        secondarypol_ID = 2 ;
        eval("peak_IL_dB=[peak_IL_" + mainpol_label + "_dB.mean , peak_IL_"+secondarypol_label+"_dB.mean];");
        eval("R1_dB=[R1_"+mainpol_label+"_dB.mean,R1_"+secondarypol_label+"_dB.mean];");
        eval("R2_dB=[R2_"+mainpol_label+"_dB.mean,R2_"+secondarypol_label+"_dB.mean];");
   }
    warning_elements = warning_elements + " spectrum data";
}

if(!exist("temperature_data")){
    temperature_data = 300;
    warning_elements = warning_elements + " themperature_data";
}

# Old notes
note_count=0;
for(i=1:10) {
    if(exist("note_" + num2str(i))==1){
        note_count=note_count+1;  
    }
}
if (note_count!=0){
    notes=cell(note_count);
    for (i=1:note_count){
        notes{i}=struct;
        eval('notes{'+num2str(i)+'}.property = note_' + num2str(i) + '.property;');
        eval('notes{'+num2str(i)+'}.value = note_' + num2str(i) + '.value;');
        eval('clear(note_'+ num2str(i)+');');
    }
    warning_elements = warning_elements + " notes";
}

temp = cell(7);
temp{1} = "peak_IL_dB"; temp{2} = "R1_dB"; temp{3} = "R2_dB"; temp{4} = "peak_wavelength_mainpol"; temp{5} = "bandwidth_1dB_mainpol"; temp{6} = "skew_mainpol"; temp{7} = "dpeakwavelength_dT_mainpol";

for (i=1:length(temp)){
    eval("exist_temp = exist('"+temp{i}+"');");
    if(exist_temp){
        eval("FOM = " + temp{i} + ";");
        if(!isfield(FOM, 'default_value')){
            eval(temp{i}+"=struct;");
            eval(temp{i}+".default_value = FOM;");
            eval(temp{i}+".visible_to_user = 0;");
            warning_elements = warning_elements +" "+temp{i};               
        }
        if(!isfield(FOM, 'name')){
            eval(temp{i}+".name = temp{i};");
        }    
    }
} 
if (warning_elements!= ""){
    backward_warning = backward_warning+ "\n           WARNING: Following data are in an old format or do not exist:\n          "+ warning_elements+endl+"           This format may not be supported in the future. Please refer to the documentation and update the data format.\n          "+endl;
}
