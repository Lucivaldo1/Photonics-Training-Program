
##################################################################

# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.

##################################################################
warning_elements = "";
backward_warning="";
backward_error="";
### New Data Format ###

if (exist("general")){
    description=general.description;
    prefix=general.prefix;
    notes=general.notes;
    clear(general);
}

if (isstruct(ports)){
    strPorts=ports; 
    port_labels = splitstring(getfield(ports),endl);
    plen=length(port_labels);
    pord=matrix(1,plen);
    for (p=1:length(port_labels)){ # if one port has "order" field, all of the ports have to have a "order" filed.
        eval("ordexists=isfield(strPorts."+port_labels{p}+", 'order');"); 
        if (ordexists==1){
            eval("pord(1,"+num2str(p)+")=strPorts."+port_labels{p}+".order;"); 
        }else{
            pord(1,p)=0;
        }
    }
    if ( (find(pord==0)!=0)  or max(pord)>plen){
        if (sum(pord)!=0){
            backward_warning=backward_warning+"\n           Port order is not defined properly for all the defined ports. Please check the source data. Default port order will be used!";
        }
        orderexists=0;
    }else{
        orderexists=1;
    }
    
    for (po=1:length(pord)){
        if (pord(po)!=1){
            if (find(pord==pord(po)-1)==0){
                if (orderexists==1){
                    backward_warning=backward_warning+"\n           Port order is not defined properly for all the defined ports. Please check the source data. Default port order will be used!";
                    orderexists=0;            
                } 
            }
        }
    }
    
    if (orderexists==1){
        ports=cell(length(unique(pord)));
    }else{
        ports=cell(plen);
    }
    for(p=1:plen){
        if (orderexists==1){
            eval("ord=strPorts."+port_labels{p}+".order;");
        }else{
            ord=p;
        }
        ports{ord}=struct;
        eval("ports{"+num2str(ord)+"}=strPorts."+port_labels{p}+";");
        eval(port_labels{p}+"_RELAY="+num2str(ord)+";");
    }
    clear(strPorts);
}

if(exist("parameters")){
    if (isstruct(parameters)){
        noparam=length(splitstring(getfield(parameters),endl));
        if (noparam!=0){
            top_parameters=cell(noparam);
            for (p=1:noparam){
                eval("paramexists=isfield(parameters,'parameter_"+num2str(p)+"');");    
                if(paramexists!=1){
                    backward_error=backward_error+"Parameters index are not consistent. Please check the source data.";
                    break;
                }else{
                    eval("top_parameters{"+num2str(p)+"}=parameters.parameter_"+num2str(p)+";");
                    eval("unitexists=isfield(parameters.parameter_"+num2str(p)+", 'unit');");
                    if (unitexists!=1){ top_parameters{p}.unit="";}
                    eval("top_parameters{"+num2str(p)+"}.default_value=parameters.parameter_"+num2str(p)+".default;");
                    if(top_parameters{p}.type == "ComboChoice"){
                        try{top_parameters{p}.default_value = num2str(top_parameters{p}.default_value);}catch(errMsg);
                    }                        
                }
        }
        }
        clear(parameters);
    }
}

if (exist("model_data")){
    photonic_model=model_data.photonic_model;
    selection_code=model_data.selection_code;
    if (isfield(model_data,"sub_element_parameters")){
        noparam=length(splitstring(getfield(model_data.sub_element_parameters),endl));
        if (noparam!=0){
            sub_element_parameters=cell(noparam);
            for (p=1:noparam){
                eval("paramexists=isfield(model_data.sub_element_parameters,'parameter_"+num2str(p)+"');");    
                if(paramexists!=1){
                    backward_error=backward_error+"sub_element_parameters index are not consistent. Please check the source data.";
                    break;
                }else{
                    eval("sub_element_parameters{"+num2str(p)+"}=model_data.sub_element_parameters.parameter_"+num2str(p)+";");
                    eval("sub_element_parameters{"+num2str(p)+"}.default_value=model_data.sub_element_parameters.parameter_"+num2str(p)+".default;");
                    eval("choiceexists=isfield(model_data.sub_element_parameters.parameter_"+num2str(p)+", 'choices');");
                    if (choiceexists!=1){ sub_element_parameters{p}.choices="";}
                }
        }
        }
    }
    if (isfield(model_data,'sub_elements')){sub_elements=model_data.sub_elements;}
    if (isfield(model_data,'delay_comp_parent')){delay_comp_parent=model_data.delay_comp_parent;}
    if (isfield(model_data,'int_delay_comp_parent')){int_delay_comp_parent=model_data.int_delay_comp_parent;}
    clear(model_data);
}

### backward ###
# Old notes
note_count=0;
for(i=1:10) {
    if(exist("note_" + num2str(i))==1){
        note_count=note_count+1;  
    }
}
if (note_count!=0){
    notes=cell(note_count);
    for (i=1:note_count){
        notes{i}=struct;
        eval('notes{'+num2str(i)+'}.property = note_' + num2str(i) + '.property;');
        eval('notes{'+num2str(i)+'}.value = note_' + num2str(i) + '.value;');
        eval('clear(note_'+ num2str(i)+');');
    }
    warning_elements = warning_elements + " notes";
}
if (warning_elements!= ""){
    backward_warning = backward_warning+ "\n           WARNING: Following data are in an old format or do not exist:\n          "+ warning_elements+endl+"           This format may not be supported in the future. Please refer to the documentation and update the data format.\n          "+endl;
}
