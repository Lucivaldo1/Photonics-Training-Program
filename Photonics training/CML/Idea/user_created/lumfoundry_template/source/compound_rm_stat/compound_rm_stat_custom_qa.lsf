# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.
err=0;
error_count=0;

#Referance data
sample_rate=1e12;
resonant_wavelength_ref=1.55e-6;
FSR_ref=0.93e-9;
Q_ref=74390;

#Relative tolerance
resonant_wavelength_rel_tolerance = 1e-2; 
FSR_rel_tolerance = 0.0125;
Q_rel_tolerance = 0.03; 

design_kit_name = '::design kits::' + library_name + "::";

new;
groupscope("::Root Element"); #return to root
set("sample rate", sample_rate);

## Test circuit: resonant_wavelength, FSR, IL, Q
addelement(design_kit_name+model);
DUT1_name = get("name");
set("x position", -140);
set("y position", 110);

addelement("DC Source");
DC1_name = get("name");
set("x position", -140);
set("y position", -185);
set("amplitude",0);


addelement("Optical Network Analyzer");
ONA1_name = get("name");
set("x position", -390);
set("y position", -115);
set("analysis type","scattering data");
#set("center frequency",f_c);
set("frequency range",sample_rate);
set("number of points",round( sample_rate*5e-9 ) );
set("plot kind", "wavelength");
set("peak at maximum",false);
set("peak threshold",100);
set("peak excursion",0.5);
set("pit excursion",0.5);

connect(ONA1_name,"output",DUT1_name,"opt_1");
connect(ONA1_name,"input 1",DUT1_name,"opt_2"); 
connect(DC1_name,"output",DUT1_name,"ele_cat");
connect(DC1_name,"output",DUT1_name,"ele_an");

run;

## Extract results
# resonant wavelength
gain_f = getresult(ONA1_name,"input 1/mode 1/gain");
T_f = getresult(ONA1_name,"input 1/mode 1/transmission");
wl = gain_f.wavelength;
gain_f = gain_f.getattribute("TE gain (dB)");

notch_test = getresult(ONA1_name,"input 1/mode 1/peak/frequency");
pos = find(notch_test,resonant_wavelength_ref);
notch_test = notch_test(pos);

# IL
IL_test = getresult(ONA1_name,"input 1/mode 1/peak/loss");
IL_test = IL_test.getattribute("TE loss (dB)");
IL_test = IL_test(pos);

title= ' gain spectrum ';
plot(wl*1e9, gain_f, 'wavelength [nm]', 'gain [dB]', title);
legend("through port gain");
holdon; 

# FSR
FSR_test = getresult(ONA1_name,"input 1/mode 1/peak/free spectral range");
FSR_test = FSR_test.getattribute("TE free spectral range (m)");
FSR_test = FSR_test(pos);

# Q
T = getresult(ONA1_name,"input 1/mode 1/transmission");
lambda = T.wavelength;
T = T.getattribute(getattribute(T));
T = abs(T)^2;
maxx = T(find(lambda , notch_test));
T = T(find(lambda , notch_test + FSR_test / 2):find(lambda , notch_test - FSR_test / 2) , 1);
lambda = lambda(find(lambda , notch_test + FSR_test / 2):find(lambda , notch_test - FSR_test / 2));
maxx1 = lambda(find(T , maxx + ((1 - maxx) / 2)));
T(find(T , maxx + ((1 - maxx) / 2))) = 0;
maxx2 = lambda(find(T , maxx + ((1 - maxx) / 2)));
Q_test = notch_test / abs(maxx2 - maxx1);

holdoff;

## Assert test results
# Test result 1a: resonant wavelength, FSR, IL, Q
msg = "resonant wavelength = " + num2str(notch_test*1e9) + "nm, and should be " + num2str(resonant_wavelength_ref*1e9) + "nm";
pass = abs(notch_test - resonant_wavelength_ref)/resonant_wavelength_ref < resonant_wavelength_rel_tolerance;
if(!pass) {
    ?msg;
    error_count = error_count+1;
}
assert(msg,pass);

msg = "FSR = " + num2str(FSR_test*1e9) + "nm, and should be " + num2str(FSR_ref*1e9) + "nm";
pass = abs(FSR_test-FSR_ref)/FSR_ref < FSR_rel_tolerance;
if(!pass) {
    ?msg;
    error_count = error_count+1;
}
assert(msg,pass);

msg = "Q = " + num2str(Q_test) + ", and should be " + num2str(Q_ref);
pass = abs(Q_test-Q_ref)/Q_ref < Q_rel_tolerance;
if(!pass) {
    ?msg;
    error_count = error_count+1;
}
assert(msg,pass);

if (err==error_count){
    ?filebasename(currentscriptname)+" test passed.";
}
