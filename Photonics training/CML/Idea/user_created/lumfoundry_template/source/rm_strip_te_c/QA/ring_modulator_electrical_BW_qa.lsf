# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.
if (exist("source_directory")){
    if (source_directory!=filedirectory(filedirectory(which(currentscriptname)))){
        clear;
        source_directory = filedirectory(filedirectory(which(currentscriptname)));
        foundry_directory = filedirectory(filedirectory(which(source_directory)));
        cd(filedirectory(which(currentscriptname)));
        feval("/aux_scripts/ring_modulator_init_qa.lsf");
    }
}else{
    clear;
    source_directory = filedirectory(filedirectory(which(currentscriptname)));
    foundry_directory = filedirectory(filedirectory(which(source_directory)));
    cd(filedirectory(which(currentscriptname)));
    feval("/aux_scripts/ring_modulator_init_qa.lsf");      
}
err=error_count;

if(!ring_resonator){
    new;
    groupscope("::Root Element"); #return to root
    set("sample rate",sample_rate);

    # Test circuit 1f: net BW calculation
    addelement(design_kit_name + model);
    DUT8_name = get("name");
    set("x position", -140);
    set("y position", 1110);

    addelement("Step Source");
    STEP2_name = get("name");
    set("x position", -240);
    set("y position", 915);
    set("amplitude",imp_amplitude);  # important to get a large eneough change in optical response
    set("bias",BW_bias);  # important to operate in a linear region
    set("delay",1e-9);  

    addelement("DC Source");
    DC11_name = get("name");
    set("x position", -40);
    set("y position", 915);
    set("amplitude",0);

    addelement("CW Laser");
    CWL1_name = get("name");
    set("x position", -390);
    set("y position", 1085);
    set("power", 0.001);
    set("frequency", c/lambda_c);

    addelement("Optical oscilloscope");
    OOSC1_name = get("name");
    set("x position", -140+200);
    set("y position", 1110);

    connect(CWL1_name,"output",DUT8_name,ports{opt_1_RELAY}.name);
    connect(OOSC1_name,"input",DUT8_name,ports{opt_2_RELAY}.name);

    if(!ring_passive){
        connect(DC11_name,"output",DUT8_name,ports{ele_th_1_RELAY}.name);
        connect(DC11_name,"output",DUT8_name,ports{ele_th_2_RELAY}.name);
    }
    connect(DC11_name,"output",DUT8_name,ports{ele_cat_RELAY}.name);
    connect(STEP2_name,"output",DUT8_name,ports{ele_an_RELAY}.name);

    if (NOA == 2) {
        connect(STEP2_name,"output",DUT8_name,ports{ele_an_2_RELAY}.name);
    }

    # Test circuit 1g: optical BW calculation (quality factor)
    addelement(design_kit_name + model);
    DUT9_name = get("name");
    set("x position", -140);
    set("y position", 1510);

    addelement("Optical Amplitude Modulator");
    AM1_name = get("name");
    set("x position", -390);
    set("y position", 1510);
    set("modulation index",1);

    addelement("Step Source");
    STEP1_name = get("name");
    set("x position", -390);
    set("y position", 1315);
    set("amplitude",-1);
    set("bias",1);
    set("delay",1e-9);

    addelement("CW Laser");
    CWL2_name = get("name");
    set("x position", -590);
    set("y position", 1510);
    set("frequency",c/lambda_c);

    addelement("DC Source");
    DC12_name = get("name");
    set("x position", -40);
    set("y position", 1315);
    set("amplitude",0);

    addelement("Optical oscilloscope");
    OOSC2_name = get("name");
    set("x position", -140+200);
    set("y position", 1510);

    connect(CWL2_name,"output",AM1_name,"input");
    connect(STEP1_name,"output",AM1_name,"modulation");
    connect(AM1_name,"output",DUT9_name,ports{opt_1_RELAY}.name);
    connect(OOSC2_name,"input",DUT9_name,ports{opt_2_RELAY}.name);
    if(!ring_passive){
        connect(DC12_name,"output",DUT9_name,ports{ele_th_1_RELAY}.name);
        connect(DC12_name,"output",DUT9_name,ports{ele_th_2_RELAY}.name);
    }
    connect(DC12_name,"output",DUT9_name,ports{ele_cat_RELAY}.name);
    connect(DC12_name,"output",DUT9_name,ports{ele_an_RELAY}.name);

    if (NOA == 2) {
        connect(DC12_name,"output",DUT9_name,ports{ele_an_2_RELAY}.name);
    } 

    # ---------
    if(exist("stat_parameters")){
        selectpartial(prefix);
        set("perturb_stat_params",0);  # flag to set all stat_prameters to zero for comparison with target values
    }
    run;


    ## Extract result
    # net 3dB BW
    delay = getnamed(STEP2_name,"delay");
    s_out = getresult(OOSC1_name,"sum/signal");
    t_out = s_out.time;
    attribute_name = getattribute(s_out);
    s_out = s_out.getattribute(attribute_name);
    p2 = (find(t_out,delay)-1+50):length(t_out);  # Truncating the curve from 100 samples after 'delay' to pick only the exponentially decaying part
    t_out = t_out(p2);
    s_out = s_out(p2);
    s_out = s_out-s_out(length(s_out));
    sf_out = fft(s_out,2,0);
    f_out = fftw(t_out,2,0)/(2*pi);
    p2 = (1:find(f_out,100e9));
    f_out = f_out(p2);
    sf_out = sf_out(p2);
    sf_out_dB = 20*log10(abs(sf_out)/abs(sf_out(1)));
    tempx = linspace(min(f_out),max(f_out),5000);
    tempy = interp(sf_out_dB, f_out, tempx);
    f3dB_net_test = tempx(find(tempy,-3));

    # optical 3dB BW
    delay = getnamed(STEP1_name,"delay");
    s_out = getresult(OOSC2_name,"sum/signal");
    t_out = s_out.time;
    attribute_name = getattribute(s_out);
    s_out = s_out.getattribute(attribute_name);
    p2 = (find(t_out,delay)+100):length(t_out);
    t_out = t_out(p2);
    s_out = s_out(p2);
    s_out = s_out-s_out(length(s_out));
    sf_out = fft(s_out,2,0);
    f_out = fftw(t_out,2,0)/(2*pi);
    p2 = (1:find(f_out,100e9));
    f_out = f_out(p2);
    sf_out = sf_out(p2);
    sf_out_dB = 20*log10(abs(sf_out)/abs(sf_out(1)));

    if (create_plots){
        title = model+"_BW";
        plot(f_out/1e9,sf_out_dB,"Frequency [GHz]", "transmission through-port [dB]", title);
    }

    tempx = linspace(min(f_out),max(f_out),5000);
    tempy = interp(sf_out_dB, f_out, tempx);
    f3dB_opt_test = tempx(find(tempy,-3));
    Q_time_domain_test = c/lambda_c/f3dB_opt_test;

    # electrical 3dB BW
    f3dB_electrical_test = (f3dB_net_test^-2 - f3dB_opt_test^-2)^-0.5;


    # Test result 1f: BW_test
    msg = "Electrical bandwidth = " + num2str(f3dB_electrical_test*1e-9) + " GHz, and should be " + num2str(f3dB_electrical_ref*1e-9) + " GHz";
    pass = abs(f3dB_electrical_test-f3dB_electrical_ref)/f3dB_electrical_ref < electrical_bandwidth_rel_tolerance;
    if(!pass) {
        ?msg;
        error_count = error_count+1;
    }
    assert(msg,pass);
    if(break_at_failure & !pass) { break; }


    # Test result 1g: optical BW test (quality factor in time domain)
    msg = "From time domain test, Q = " + num2str(Q_time_domain_test) + ", and should be " + num2str(Q_ref);
    pass = abs(Q_time_domain_test-Q_ref)/Q_ref < 6 * Q_rel_tolerance;     #### relaxed tolerance for time domain Q
    if(!pass) {
        ?msg;
        error_count = error_count+1;
    }
    assert(msg,pass);
    if(break_at_failure & !pass) { break; }
    if (err==error_count){
        ?filebasename(currentscriptname)+" test passed.";
    }
}else{
    ?"Test-bench is not applicable to this element. "+ filebasename(currentscriptname)+" did not run!";
}