if(!ring_passive){
    new;
    groupscope("::Root Element"); #return to root
    set("sample rate",sample_rate);

    ## Test circuit 1c: Ppi_thermal_tuner
    addelement(design_kit_name + model);
    DUT4_name = get("name");
    set("x position", -140+500);
    set("y position", 785);

    # for PCells
    if(exist("parameters")){
        eval("set('"+radius_name+"',test_radius(c1));");
        eval("set('"+Lc_name+"',test_Lc(c1));");
    }      

    addelement(design_kit_name + model);
    DUT5_name = get("name");
    set("x position", -140+500);
    set("y position", 960);
    
    # for PCells
    if(exist("parameters")){
        eval("set('"+radius_name+"',test_radius(c1));");
        eval("set('"+Lc_name+"',test_Lc(c1));");
    }  

    addelement("Optical Splitter");
    Split2_name = get("name");
    set("x position", 185);
    set("y position", 875);

    addelement("DC Source");
    DC5_name = get("name");
    set("x position", -140+500);
    set("y position", 565);
    set("amplitude",0);

    if(exist("IV")){
        P = IV(:,1)*IV(:,2);
        mod_eff_thermal_voltage1 = interp(IV(:,1),P,mod_eff_thermal_power1);
        mod_eff_thermal_voltage2 = interp(IV(:,1),P,mod_eff_thermal_power2);
    }else{
        if(exist("R_thermal_tuner")){
            mod_eff_thermal_voltage1 = sqrt(mod_eff_thermal_power1 * R_thermal_tuner);
            mod_eff_thermal_voltage2 = sqrt(mod_eff_thermal_power2 * R_thermal_tuner);
        }
    }

    addelement("DC Source");
    DC6_name = get("name");
    set("x position", 550);
    set("y position", 565);
    set("amplitude",mod_eff_thermal_voltage1);

    addelement("DC Source");
    DC7_name = get("name");
    set("x position", -140+500);
    set("y position", 1150);
    set("amplitude",mod_eff_thermal_voltage2);

    addelement("Optical Network Analyzer");
    ONA3_name = get("name");
    set("x position", -390+500);
    set("y position", 635);
    set("analysis type","scattering data");
    set("center frequency",f_c);
    set("frequency range",fspan);
    set("number of points",round( fspan*2e-8 ) );
    set("plot kind", "wavelength");
    set("peak at maximum",false);
    set("peak threshold",100);
    set("number of input ports", 2);
    set("peak excursion",0.5);
    set("pit excursion",0.5);

    connect(ONA3_name,"output",Split2_name,"input");
    connect(Split2_name,"output 1",DUT4_name,ports{opt_1_RELAY}.name);
    connect(Split2_name,"output 2",DUT5_name,ports{opt_1_RELAY}.name);
    connect(ONA3_name,"input 1",DUT4_name,ports{opt_2_RELAY}.name);
    connect(ONA3_name,"input 2",DUT5_name,ports{opt_2_RELAY}.name);
    connect(DC6_name,"output",DUT4_name,ports{ele_th_1_RELAY}.name);
    connect(DC5_name,"output",DUT4_name,ports{ele_th_2_RELAY}.name);
    connect(DC7_name,"output",DUT5_name,ports{ele_th_1_RELAY}.name);
    connect(DC5_name,"output",DUT5_name,ports{ele_th_2_RELAY}.name);

    if(!ring_resonator){
        connect(DC5_name,"output",DUT4_name,ports{ele_cat_RELAY}.name);
        connect(DC5_name,"output",DUT4_name,ports{ele_an_RELAY}.name);
        connect(DC5_name,"output",DUT5_name,ports{ele_cat_RELAY}.name);
        connect(DC5_name,"output",DUT5_name,ports{ele_an_RELAY}.name);
        
        if (NOA == 2){
        connect(DC5_name,"output",DUT4_name,ports{ele_an_2_RELAY}.name);
        connect(DC5_name,"output",DUT5_name,ports{ele_an_2_RELAY}.name);
        }
    }

    run;

    ## Extract results
    # thermal tuning Vpi
    reslambda1 = getresult(ONA3_name,"input 1/mode 1/peak/frequency");
    N_f1  = length(reslambda1);
    reslambda2 = getresult(ONA3_name,"input 2/mode 1/peak/frequency");
    N_f2  = length(reslambda2);
    
    if(N_f1==1 | N_f2==1){
        switchtodesign;
        setnamed(ONA3_name,"frequency range",fspan*0.9);
        run;
        reslambda1 = getresult(ONA3_name,"input 1/mode 1/peak/frequency");
        reslambda2 = getresult(ONA3_name,"input 2/mode 1/peak/frequency");
    }
    
    pos1 = find(reslambda1,lambda_c);
    reslambda1 = reslambda1(pos1);
    
    pos2 = find(reslambda2,lambda_c);
    reslambda2 = reslambda2(pos2);

    mod_eff_thermal_test = (reslambda2 - reslambda1) / (mod_eff_thermal_power2 - mod_eff_thermal_power1);

    # create plots
    if(create_plots){
        input1_gain_result = getresult(ONA3_name,"input 1/mode 1/gain");
        wl = input1_gain_result.wavelength;
        input1_gain = getresultdata(ONA3_name,"input 1/mode 1/gain");
        input2_gain = getresultdata(ONA3_name,"input 2/mode 1/gain");

        title= model + ' thermal Ppi';
        plot(wl*1e9, input1_gain, input2_gain, 'wavelength [nm]', 'gain [dB]', title);
        legend(num2str(mod_eff_thermal_power1)+" W", num2str(mod_eff_thermal_power2)+ "W");
    }

}else{
    ?"Test-bench is not applicable to this element. "+ filebasename(currentscriptname)+" did not run!";
}