##################################################################

# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.

# Unauthorized use, distribution, or duplication is prohibited.
# This product is subject to U.S. laws governing export and re-export.

# For full Legal Notice, see documentation.

##################################################################
warning_elements = "";
backward_warning="";
backward_error="";
### New Data Format ###

if (exist("general")){
    description=general.description;
    prefix=general.prefix;
    notes=general.notes;
    time_domain_req_note=general.time_domain_req_note;
    clear(general);
}
if (isstruct(ports)){
    new_ports=ports;
    strPorts=splitstring(getfield(new_ports),endl);
    plen=length(strPorts);
    fplen=0;
    if (plen!=0){
        for (p=1:plen){
            eval("fpexists=isfield(new_ports,'floating_port_"+num2str(p)+"');");
            if (fpexists==1){
                if (p!=fplen+1){
                    backward_error=backward_error+"Floating port names are not consistent. Please check the source data.";
                    break;
                }else{
                    fplen=fplen+1;
                }
            }
        }
    }

    pord=matrix(1,plen);
    for (p=1:plen){ # if one port has "order" field, all of the ports have to have a "order" filed.
        eval("ordexists=isfield(new_ports."+strPorts{p}+", 'order');"); 
        if (ordexists==1){
            eval("pord(1,"+num2str(p)+")=new_ports."+strPorts{p}+".order;"); 
        }else{
            pord(1,p)=0;
        }
    }

    if ( (find(pord==0)!=0)  or max(pord)>plen){
        if (sum(pord)!=0){
            backward_warning=backward_warning+"\n           Port order is not defined properly for all the ports. Please check the source data. Default port order will be used!";
        }
        orderexists=0;
    }else{
        orderexists=1;
    }
    
    for (po=1:length(pord)){
        if (pord(po)!=1){
            if (find(pord==pord(po)-1)==0){
                if (orderexists==1){
                    backward_warning=backward_warning+"\n           Port order is not defined properly for all the ports. Please check the source data. Default port order will be used!";
                    orderexists=0;            
                } 
            }
        }
    }
    
    if (orderexists==1){
        ports=cell(length(unique(pord)));
    }else{
        ports=cell(plen);
    }
    
    for (p=1:plen){
        fport=0;
        for (fp=(1:fplen)){
            fname="floating_port_"+num2str(fp);
            if (fname==strPorts{p}){
                fport=1;
            }
        }
        if (orderexists==1){
            eval("ord=new_ports."+strPorts{p}+".order;");
        }else{
            ord=p;
        }
        ports{ord}=struct;
        eval("ports{"+num2str(ord)+"}=new_ports."+strPorts{p}+";");
        if (strPorts{p}=="opt_1" or strPorts{p}=="opt_2" or strPorts{p}=="opt_3" or strPorts{p}=="opt_4" ){
            ports{ord}.type="Optical Signal";
        }else{
            ports{ord}.type="Electrical Signal";
        }
        if (fport!=1){
            if (strPorts{p}=="th_pos"){
                eval("ele_th_1_RELAY="+num2str(ord)+";");
            }else if (strPorts{p}=="th_neg"){
                eval("ele_th_2_RELAY="+num2str(ord)+";");
            }else{
                eval(strPorts{p}+"_RELAY="+num2str(ord)+";");
            }
        }
    }
    clear(new_ports);
}

if (exist("parameters")){
    temperature=parameters.temperature.default;
    params=splitstring(getfield(parameters),endl);
    for (p=1:length(params)){
        if (params{p}!="temperature" and params{p}!="coupling_length" ){
            eval(params{p}+"=parameters."+params{p}+";");
            eval(params{p}+".default_value=parameters."+params{p}+".default;");
        }else if (params{p}=="coupling_length"){
            Lc=parameters.coupling_length;
            Lc.default_value=parameters.coupling_length.default;
        }
    }
    clear(parameters);
}
if (exist("model_data")){
    photonic_model=model_data.photonic_model;
    if (isfield(model_data.waveguide_data,"wavelength")){wavelength_data=model_data.waveguide_data.wavelength;}    
    if (isfield(model_data.waveguide_data,"temperature")){temperature_data=model_data.waveguide_data.temperature;}
    wgs={"waveguide_ring_undoped","waveguide_ring_doped","waveguide_hangover"};
    neff_all=matrix(1,3);
    ng_all=matrix(1,3);
    loss_all=matrix(1,3);
    D_all=matrix(1,3);
    dneff_dT_all=matrix(1,6);
    for (wg=1:3){
        eval("neff_all(1,"+num2str(wg)+")=model_data.waveguide_data."+wgs{wg}+".neff;");
        eval("ng_all(1,"+num2str(wg)+")=model_data.waveguide_data."+wgs{wg}+".ng;");
        eval("loss_all(1,"+num2str(wg)+")=model_data.waveguide_data."+wgs{wg}+".loss;");
        eval("Dexists=isfield(model_data.waveguide_data."+wgs{wg}+",'D');");
        if (Dexists==1){
            eval("D_all(1,"+num2str(wg)+")=model_data.waveguide_data."+wgs{wg}+".D;");
        }
        eval("dneff_dT_all(1,"+num2str(wg)+")=model_data.waveguide_data."+wgs{wg}+".dneff_dT;");
    }
    hangover_length=model_data.waveguide_data.waveguide_hangover.length;
    dneff_dT=struct;
    dneff_dT.default_value=sum(dneff_dT_all)/3;
    dneff_dT.visible_to_user=0.0;

    #parameter data 
    pardata={"bandwidth_data","thermal_bandwidth_data", "th_eq_ckt_data", "coupler_data.couplercoeff_data"};
    for (d=1:length(pardata)){
        eval("dataexists=isfield(model_data,'"+pardata{d}+"');");
        if (dataexists==1){
            if (!isfield(radius,'data')){eval("radius.data=model_data."+pardata{d}+".radius;");}
            else{
                eval("rdata=model_data."+pardata{d}+".radius;");
                if (size(rdata)==size(radius.data)){
                   if(almostequal(rdata,radius.data)!=1){ 
                        backward_error=backward_error+"Radius values are not consistent for all the parameterized data. Please check source data!";
                        break;  
                    }     
                }else{
                    backward_error=backward_error+"Radius data size is not consistent for all the parameterized data. Please check source data!";
                        break; 
                }
            }
            if (pardata{d}!="coupler_data.couplercoeff_data"){
                if (!isfield(Lc,'data')){eval("Lc.data=model_data."+pardata{d}+".coupling_length;");}
                else{
                    eval("ldata=model_data."+pardata{d}+".coupling_length;");
                    if (size(ldata)==size(Lc.data)){
                        if(almostequal(ldata,Lc.data)!=1){ 
                            backward_error=backward_error+"Coupling length values are not consistent for all the parameterized data. Please check source data!";
                            break;
                }       
                    }else{
                        backward_error=backward_error+"Coupling length data size is not consistent for all the parameterized data. Please check source data!";
                            break; 
                    }
                }

            }
        }
    }

    #electrical_tuner
    if (isfield(model_data,"electrical_tuner_data")){
        #electrical_bandwidth
        if (isfield(model_data.electrical_tuner_data,"bandwidth_data")){
            electrical_bandwidth_data=matrix(length(radius.data), length(Lc.data), length(model_data.electrical_tuner_data.bandwidth_data.voltage),2);
            vlen=length(model_data.electrical_tuner_data.bandwidth_data.voltage);
            for (r=1:length(radius.data)){
                for (l=1:length(Lc.data)){
                    electrical_bandwidth_data(r,l,:,1)=model_data.electrical_tuner_data.bandwidth_data.voltage;
                }
            }
            electrical_bandwidth_data(:,:,:,2)=model_data.electrical_tuner_data.bandwidth_data.bandwidth;
            # store the original source data for use in electrical subcircuit
            original_ele_bandwidth_data= model_data.electrical_tuner_data.bandwidth_data;
        }

        #phase_shifter
        if (isfield(model_data.electrical_tuner_data,"phase_shifter_data")){
            phase_shifter_data=matrix(length(model_data.electrical_tuner_data.phase_shifter_data.voltage),3);
            phase_shifter_data(:,1)=model_data.electrical_tuner_data.phase_shifter_data.voltage;
            phase_shifter_data(:,2)=model_data.electrical_tuner_data.phase_shifter_data.delta_n;
            phase_shifter_data(:,3)=model_data.electrical_tuner_data.phase_shifter_data.delta_k;
        }
    }
    #thermal_tuner
    if (isfield(model_data,"thermal_tuner_data")){
        if (isfield(model_data.thermal_tuner_data,"phase_shifter_data")){
            thermal_tuner_data=matrix(length(model_data.thermal_tuner_data.phase_shifter_data.power),2);
            thermal_tuner_data(:,1)=model_data.thermal_tuner_data.phase_shifter_data.power;
            thermal_tuner_data(:,2)=model_data.thermal_tuner_data.phase_shifter_data.delta_phase;
        }
        if (isfield(model_data.thermal_tuner_data,"data_format")){thermal_tuner_data_format=model_data.thermal_tuner_data.data_format;}
        #thermal bandwidth
        if (isfield(model_data.thermal_tuner_data,"bandwidth_data")){
            thermal_bandwidth_data=model_data.thermal_tuner_data.bandwidth_data.bandwidth;
        }
    }

    #th_eq_ckt_data
    if (isfield(model_data,"th_eq_ckt_data")){
        if (isfield(model_data.th_eq_ckt_data,"current")){
            IV=matrix(length(radius.data), length(Lc.data), length(model_data.th_eq_ckt_data.voltage),2);
            for (r=1:length(radius.data)){
                for (l=1:length(Lc.data)){
                    IV(r,l,:,1)=model_data.th_eq_ckt_data.voltage;
                }
                
            }
            IV(:,:,:,2)=model_data.th_eq_ckt_data.current;
        }else if (isfield(model_data.th_eq_ckt_data,"R_thermal_tuner")){
            R_thermal_tuner=model_data.th_eq_ckt_data.R_thermal_tuner;
        }
        # store the original source data for use in electrical subcircuit
        th_eq_ckt_data= model_data.th_eq_ckt_data;   
    }

    #elec_eq_ckt_data
    if (isfield(model_data,"elec_eq_ckt_data")){
        elec_eq_ckt_data=model_data.elec_eq_ckt_data;
    }

    if (isfield(model_data.coupler_data,"wavelength")){
        coupler_lambda_max=model_data.coupler_data.wavelength.max;
        coupler_lambda_min=model_data.coupler_data.wavelength.min;
        }
    
    #couplercoeff
    if (isfield(model_data.coupler_data.couplercoeff_data,"coupling_gap")){couplercoeff_gap=model_data.coupler_data.couplercoeff_data.coupling_gap;}
    if (isfield(model_data.coupler_data.couplercoeff_data,"couplercoeff")){
        couplercoeff=matrix(length(radius.data), length(couplercoeff_gap),2,2);
        couplercoeff=model_data.coupler_data.couplercoeff_data.couplercoeff;
    }

    clear(model_data);
}
if (exist("FOMs")){

    #parameter data
    FOM_names={"ER","IL","IL_drop","FSR","mod_eff","mod_eff_thermal","Q","resonant_wavelength"};
    lock_resonance_peak_shape=0;
    for (f=1:length(FOM_names)){
        eval("fOMexists=isfield(FOMs,'"+FOM_names{f}+"');");
        if (fOMexists==1){
            eval("fOMdataexists=isfield(FOMs."+FOM_names{f}+",'data');");
            if (fOMdataexists==1){
                #param check
                eval("fomrdata=FOMs."+FOM_names{f}+".data.radius;");
                eval("fomldata=FOMs."+FOM_names{f}+".data.coupling_length;");
                if (size(fomrdata)==size(radius.data)){
                    if(almostequal(fomrdata,radius.data)!=1){ 
                        backward_error=backward_error+"Radius values are not consistent for all the parameterized data. Please check source data!";
                        break; 
                    }      
                }else{
                    backward_error=backward_error+"Radius data size is not consistent for all the parameterized data. Please check source data!";
                        break; 
                }    
                if (size(fomldata)==size(Lc.data)){
                    if(almostequal(fomldata,Lc.data)!=1){  
                        backward_error=backward_error+"Coupling length values are not consistent for all the parameterized data. Please check source data!";
                        break;      
                    } 
                }else{
                    backward_error=backward_error+"Coupling length data size is not consistent for all the parameterized data. Please check source data!";
                        break; 
                }
                if (FOM_names{f}=="ER" or FOM_names{f}=="IL" or FOM_names{f}=="IL_drop" or FOM_names{f}=="Q"){
                    coupling_gap_drop.data=FOMs.IL.data.coupling_gap_drop;
                    coupling_gap_through.data=FOMs.IL.data.coupling_gap_through;
                    if (!isfield(coupling_gap_drop,'data')){
                        eval("coupling_gap_drop.data=model_data."+pardata{d}+".data.coupling_gap_drop;");
                        eval("coupling_gap_through.data=model_data."+pardata{d}+".data.coupling_gap_through;");
                    }else{
                        eval("fomgtdata=FOMs."+FOM_names{f}+".data.coupling_gap_through;");
                        eval("fomgddata=FOMs."+FOM_names{f}+".data.coupling_gap_drop;");
                        if (size(fomgtdata)==size(coupling_gap_through.data)){
                            if(almostequal(fomgtdata,coupling_gap_through.data)!=1){ 
                                backward_error=backward_error+"Coupling gap through values are not consistent for all the parameterized data. Please check source data!";
                                break;     
                            }  
                        }else{
                            backward_error=backward_error+"Coupling gap through data size is not consistent for all the parameterized data. Please check source data!";
                                break; 
                        }    
                        if (size(fomgddata)==size(coupling_gap_drop.data)){
                            if(almostequal(fomgddata,coupling_gap_drop.data)!=1){  
                                backward_error=backward_error+"Coupling gap drop values are not consistent for all the parameterized data. Please check source data!";
                                break;   
                            }    
                        }else{
                            backward_error=backward_error+"Coupling gap drop data size is not consistent for all the parameterized data. Please check source data!";
                                break; 
                        } 
                    }
                }

            }

            eval(FOM_names{f}+"=FOMs."+FOM_names{f}+";");
            eval(FOM_names{f}+".data=FOMs."+FOM_names{f}+".data."+FOM_names{f}+";");
            eval(FOM_names{f}+".default_value=FOMs."+FOM_names{f}+".value;");
            eval("visexists=isfield(FOMs."+FOM_names{f}+",'visible_to_user');");
            if (visexists!=1){
                eval(FOM_names{f}+".visible_to_user=0;");
            } 
            eval("tunexists=isfield(FOMs."+FOM_names{f}+",'tuning');");
            if (tunexists==1){
                if (FOM_names{f}=="IL" or FOM_names{f}=="Q" or FOM_names{f}=="ER" or FOM_names{f}=="IL_drop"){
                    eval("tuneON=FOMs."+FOM_names{f}+".tuning;");
                    if (tuneON==1){
                    lock_resonance_peak_shape=1;
                    }
                }else{
                    eval("lock_"+FOM_names{f}+"=FOMs."+FOM_names{f}+".tuning;");
                }   
            }
            if (FOM_names{f}=="mod_eff_thermal"){
                mod_eff_thermal_power1=FOMs.mod_eff_thermal.ref1;
                mod_eff_thermal_power2=FOMs.mod_eff_thermal.ref2;
            }
            if (FOM_names{f}=="mod_eff"){
                mod_eff_voltage1=FOMs.mod_eff.ref1;
                mod_eff_voltage2=FOMs.mod_eff.ref2;
            }
        }   
    }
    clear(FOMs);  
}
if (exist("QA")){
    if (isfield(QA.parameters,"radius")){test_radius=QA.parameters.radius;}
    if (isfield(QA.parameters,"coupling_gap_through")){test_coupling_gap_through=QA.parameters.coupling_gap_through;}
    if (isfield(QA.parameters,"coupling_gap_drop")){test_coupling_gap_drop=QA.parameters.coupling_gap_drop;}
    if (isfield(QA.parameters,"coupling_length")){test_Lc=QA.parameters.coupling_length;}
    if (isfield(QA.parameters,"thermal_BW_bias")){BW_bias_thermal=QA.parameters.thermal_BW_bias;}
    if (isfield(QA.parameters,"sample_rate")){sample_rate=QA.parameters.sample_rate;}
    if (isfield(QA.parameters,"imp_amplitude")){imp_amplitude=QA.parameters.imp_amplitude;}
    if (isfield(QA.parameters,"BW_bias")){BW_bias=QA.parameters.BW_bias;}
    if (isfield(QA,'relative_tolerances')){
        tols={"FSR","IL","IL_drop","ER","Q","dneff_dT","BW_electrical","mod_eff","mod_eff_thermal","resonant_wavelength","BW_thermal"};
        for (t=1:length(tols)) {
            eval("tolexist=isfield(QA.relative_tolerances,'"+tols{t}+"');");
            if (tolexist==1){
                if (tols{t}=="BW_electrical"){ electrical_bandwidth_rel_tolerance=QA.relative_tolerances.BW_electrical;}
                else if (tols{t}=="BW_thermal"){thermal_bandwidth_rel_tolerance=QA.relative_tolerances.BW_thermal;}
                else {eval(tols{t}+"_rel_tolerance=QA.relative_tolerances."+tols{t}+";");}
            }
        }
    }
    clear(QA);
}
