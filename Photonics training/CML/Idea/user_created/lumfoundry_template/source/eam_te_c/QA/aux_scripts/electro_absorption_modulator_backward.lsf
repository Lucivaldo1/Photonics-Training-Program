##################################################################

# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.

##################################################################
warning_elements = "";
backward_warning="";
backward_error="";

### New Data Format ###

if (exist("general")){
    description=general.description;
    prefix=general.prefix;
    notes=general.notes;
    clear(general);
}
if (isstruct(ports)){
    new_ports=ports;
    strPorts=splitstring(getfield(new_ports),endl);
    plen=length(strPorts);
    fplen=0;
    if (plen!=0){
        for (p=1:plen){
            eval("fpexists=isfield(new_ports,'floating_port_"+num2str(p)+"');");
            if (fpexists==1){
                if (p!=fplen+1){
                    backward_error=backward_error+"Floating port names are not consistent. Please check the source data.";
                    break;
                }else{
                    fplen=fplen+1;
                }
            }
        }
    }

    pord=matrix(1,plen);
    for (p=1:plen){ # if one port has "order" field, all of the ports have to have a "order" filed.
        eval("ordexists=isfield(new_ports."+strPorts{p}+", 'order');"); 
        if (ordexists==1){
            eval("pord(1,"+num2str(p)+")=new_ports."+strPorts{p}+".order;"); 
        }else{
            pord(1,p)=0;
        }
    }

    if ( (find(pord==0)!=0)  or max(pord)>plen){
        if (sum(pord)!=0){
            backward_warning=backward_warning+"\n           Port order is not defined properly for all the ports. Please check the source data. Default port order will be used!";
        }
        orderexists=0;
    }else{
        orderexists=1;
    }
    
    for (po=1:length(pord)){
        if (pord(po)!=1){
            if (find(pord==pord(po)-1)==0){
                if (orderexists==1){
                    backward_warning=backward_warning+"\n           Port order is not defined properly for all the ports. Please check the source data. Default port order will be used!";
                    orderexists=0;            
                } 
            }
        }
    }
    
    if (orderexists==1){
        ports=cell(length(unique(pord)));
    }else{
        ports=cell(plen);
    }
    
    for (p=1:plen){
        fport=0;
        for (fp=(1:fplen)){
            fname="floating_port_"+num2str(fp);
            if (fname==strPorts{p}){
                fport=1;
            }
        }
        if (orderexists==1){
            eval("ord=new_ports."+strPorts{p}+".order;");
        }else{
            ord=p;
        }
        ports{ord}=struct;
        eval("ports{"+num2str(ord)+"}=new_ports."+strPorts{p}+";");
        if (strPorts{p}=="opt_1" or strPorts{p}=="opt_2"){
            ports{ord}.type="Optical Signal";
        }else{
            ports{ord}.type="Electrical Signal";
        }
        if (fport!=1){
            eval(strPorts{p}+"_RELAY="+num2str(ord)+";");
        }
    }
    clear(new_ports);
}

if (exist("parameters")){
    temperature=parameters.temperature.default;
    clear(parameters);
}
if (exist("model_data")){
    photonic_model=model_data.photonic_model;
    if (isfield(model_data,'mode_data')){mode_data=model_data.mode_data;}
    if (isfield(model_data,'wavelength')){wavelength_data=model_data.wavelength;}

    #transmission_voltage_data
    if (isfield(model_data,'transmission_voltage_data')){
        new_tvd=model_data.transmission_voltage_data;
        V_transmission=new_tvd.voltage;
        transmission_voltage_data=matrix(length(new_tvd.frequency),length(V_transmission)+1);
        transmission_voltage_data(:,1)=new_tvd.frequency;
        transmission_voltage_data(:,2:length(V_transmission)+1)=new_tvd.transmission;
        clear(new_tvd);
    }
    
    #Idark_data
    if (isfield(model_data,'Idark_data')){
        new_id=model_data.Idark_data;
        T_Idark=new_id.temperature;
        Idark_data=matrix(length(new_id.voltage),length(T_Idark)+1);
        Idark_data(:,1)=new_id.voltage;
        Idark_data(:,2:length(T_Idark)+1)=new_id.Idark;
        clear(new_id);
    }

    #resp_voltage_data
    if (isfield(model_data,'resp_voltage_data')){
        new_rvd=model_data.resp_voltage_data;
        V_resp=new_rvd.voltage;
        Resp_voltage_data=matrix(length(new_rvd.frequency),length(V_resp)+1);
        Resp_voltage_data(:,1)=new_rvd.frequency;
        Resp_voltage_data(:,2:length(V_resp)+1)=new_rvd.responsivity;
        clear(new_rvd);
    }
    
    #transmission_temperature_data
    if (isfield(model_data,'transmission_temperature_data')){
        new_ttd=model_data.transmission_temperature_data;
        T_transmission=new_ttd.temperature;
        transmission_temperature_data=matrix(length(new_ttd.frequency),length(T_transmission)+1);
        transmission_temperature_data(:,1)=new_ttd.frequency;
        transmission_temperature_data(:,2:length(T_transmission)+1)=new_ttd.transmission;
        clear(new_ttd);
    }

    #resp_temperature_data
    if (isfield(model_data,'resp_temperature_data')){
        new_rtd=model_data.resp_temperature_data;
        T_resp=new_rtd.temperature;
        Resp_temperature_data=matrix(length(new_rtd.frequency),length(T_resp)+1);
        Resp_temperature_data(:,1)=new_rtd.frequency;
        Resp_temperature_data(:,2:length(T_resp)+1)=new_rtd.responsivity;
        clear(new_rtd);
    }

    if (isfield(model_data,'bandwidth_data')){bandwidth_data=model_data.bandwidth_data;}
    if (isfield(model_data,'loss_taper')){loss_taper=model_data.loss_taper;}
    taper_filename=model_data.taper_filename;
    clear(model_data);
}
if (exist("FOMs")){ 
    if (isfield(FOMs, 'ER')){
        ER=struct;
        ER=FOMs.ER.value;
        ER_voltage1=FOMs.ER.ref1;
        ER_voltage2=FOMs.ER.ref2;
        if (isfield(FOMs.ER,'visible_to_user')){
            if (FOMs.ER.visible_to_user==1){
                backward_warning=backward_warning+"\n           WARNING: ER cannot be set visible to user. visible for ER will be ignored!";
            }
        }
        if (isfield(FOMs.ER,'tuning')){
            lock_ER=FOMs.ER.tuning;
        }
    }
    if (isfield(FOMs, 'IL')){
        IL=struct;
        IL=FOMs.IL.value;
        if (isfield(FOMs.IL,'visible_to_user')){
            if (FOMs.IL.visible_to_user==1){
                backward_warning=backward_warning+"\n           WARNING: IL cannot be set visible to user. visible for IL will be ignored!";
            }
        }
        if (isfield(FOMs.IL,'tuning')){
            lock_IL=FOMs.IL.tuning;
        }
    }
    clear(FOMs);  
}
if (exist("QA")){
    if (isfield(QA,'relative_tolerances')){
        tols={"BW","IL","ER"};
        for (t=1:length(tols)) {
            eval("tolexist=isfield(QA.relative_tolerances,'"+tols{t}+"');");
            if (tolexist==1){
                eval(tols{t}+"_rel_tolerance=QA.relative_tolerances."+tols{t}+";");
            }
        }
    }
    clear(QA);
}

### backward ###

if(!exist("mode_data")){
    mode_data = cell(1);
    mode_data{1} = struct;
    mode_data{1}.name = mode_label;
    mode_data{1}.ID = mode_ID;
    warning_elements = warning_elements + " mode_data";

}
if(exist("BW.mean")){
    BW = BW.mean;
    warning_elements = warning_elements + " BW";     
}
if(exist("IL.mean")){
    IL = IL.mean;
    warning_elements = warning_elements + " IL";    
}
if(exist("ER.mean")){
    ER = ER.mean;
    ER_voltage1 = V0;
    ER_voltage2 = V1;
    warning_elements = warning_elements + " ER";    
}
if(!exist("wavelength_data")){
    wavelength_data = Operating_Wavelength;
    warning_elements = warning_elements + " Operating_Wavelength";  
}
if(!exist("Resp_voltage_data")){
    Resp_voltage_data = readdata(source_directory+"/"+R_voltage_filename);
    warning_elements = warning_elements + " R_voltage_filename";    
}
if(!exist("transmission_voltage_data")){
    transmission_voltage_data = readdata(source_directory+"/"+Spectra_voltage_filename);
    warning_elements = warning_elements + " Spectra_voltage_filename";    
}
if(!exist("transmission_temperature_data") and exist("Spectra_temp_filename")){
    transmission_temperature_data = readdata(source_directory+"/"+Spectra_temp_filename);
    warning_elements = warning_elements + " Spectra_temp_filename";    
 
}
if(!exist("Idark_data")){
    Idark_data = readdata(source_directory+"/"+Idark_filename);
    warning_elements = warning_elements + " Idark_filename";    
   
}
if(!exist("Resp_temperature_data")){
    Resp_temperature_data = readdata(source_directory+"/"+R_temp_filename);
    warning_elements = warning_elements + " R_temp_filename";    
 
}

# Old notes
note_count=0;
for(i=1:10) {
    if(exist("note_" + num2str(i))==1){
        note_count=note_count+1;  
    }
}
if (note_count!=0){
    notes=cell(note_count);
    for (i=1:note_count){
        notes{i}=struct;
        eval('notes{'+num2str(i)+'}.property = note_' + num2str(i) + '.property;');
        eval('notes{'+num2str(i)+'}.value = note_' + num2str(i) + '.value;');
        eval('clear(note_'+ num2str(i)+');');
    }
    warning_elements = warning_elements + " notes";
}
if (warning_elements!= ""){
    backward_warning = backward_warning+ "\n           WARNING: Following data are in an old format or do not exist:\n          "+ warning_elements+endl+"           This format may not be supported in the future. Please refer to the documentation and update the data format.\n          "+endl;
}