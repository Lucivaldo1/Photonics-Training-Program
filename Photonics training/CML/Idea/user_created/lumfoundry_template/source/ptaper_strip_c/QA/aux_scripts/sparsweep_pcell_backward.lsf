##################################################################

# Copyright (c) 2003-2020, Ansys, Inc. All rights reserved.  

# Unauthorized use, distribution, or duplication is prohibited.  
# This product is subject to U.S. laws governing export and re-export.  

# For full Legal Notice, see documentation.

##################################################################
warning_elements = "";
backward_warning="";
backward_error="";
### New Data Format ###

if (exist("general")){
    description=general.description;
    prefix=general.prefix;
    notes=general.notes;
    clear(general);
}

if (isstruct(ports)){
    strPorts=ports; 
    port_labels = splitstring(getfield(ports),endl);
    plen=length(port_labels);
    pord=matrix(1,plen);
    for (p=1:length(port_labels)){ # if one port has "order" field, all of the ports have to have a "order" filed.
        eval("ordexists=isfield(strPorts."+port_labels{p}+", 'order');"); 
        if (ordexists==1){
            eval("pord(1,"+num2str(p)+")=strPorts."+port_labels{p}+".order;"); 
        }else{
            pord(1,p)=0;
        }
    }
    if ( (find(pord==0)!=0)  or max(pord)>plen){
        if (sum(pord)!=0){
            backward_warning=backward_warning+"\n           Port order is not defined properly for all the defined ports. Please check the source data. Default port order will be used!";
        }
        orderexists=0;
    }else{
        orderexists=1;
    }
    
    for (po=1:length(pord)){
        if (pord(po)!=1){
            if (find(pord==pord(po)-1)==0){
                if (orderexists==1){
                    backward_warning=backward_warning+"\n           Port order is not defined properly for all the defined ports. Please check the source data. Default port order will be used!";
                    orderexists=0;            
                } 
            }
        }
    }
    
    if (orderexists==1){
        ports=cell(length(unique(pord)));
    }else{
        ports=cell(plen);
    }

    for(p=1:plen){
        if (orderexists==1){
            eval("ord=strPorts."+port_labels{p}+".order;");
        }else{
            ord=p;
        }
        ports{ord}=struct;
        eval("ports{"+num2str(ord)+"}=strPorts."+port_labels{p}+";");
        ports{ord}.type="Optical Signal";
        eval(port_labels{p}+"_RELAY="+num2str(ord)+";");
    }
    clear(strPorts);
}

if(exist("parameters")){
    if (isstruct(parameters)){
        new_parameters=parameters;
        noparam=length(splitstring(getfield(new_parameters),endl));
        if (noparam!=0){
            parameters=cell(noparam);
            if (noparam>1){
                p1=cell(noparam-1);
            }
            q=1;
            temp_flag=0;
            for (p=1:noparam){
                eval("paramexists=isfield(new_parameters,'parameter_"+num2str(p)+"');");    
                if(paramexists!=1){
                    backward_error=backward_error+"Parameters index are not consistent. Please check the source data.";
                    break;
                }else{
                    eval("parkind=new_parameters.parameter_"+num2str(p)+".kind;");   
                    if (parkind=="Temperature"){ 
                        eval("temperature=new_parameters.parameter_"+num2str(p)+".default;");
                        if (noparam==1){clear(parameters);}
                        else{
                            temp_flag=1;
                        }
                    }else{
                    eval("parameters{"+num2str(p)+"}=new_parameters.parameter_"+num2str(p)+";");
                    eval("parameters{"+num2str(p)+"}.default_value=new_parameters.parameter_"+num2str(p)+".default;");
                    if (q < noparam){
                        p1{q}=parameters{p};
                        q=q+1;
                    }
                    }
                }
        }
        if (temp_flag==1){
            parameters=p1;
        }
        }
        clear(new_parameters);
    }
}

if (exist("model_data")){
    photonic_model=model_data.photonic_model;
    if (isfield(model_data,"spar_filename")){
        spar_filename=model_data.spar_filename;
    }
    else{
        lut_filename=model_data.lut_filename;
        file_extension=model_data.file_extension;
    }
    number_of_taps_estimation=model_data.number_of_taps_estimation;
    reciprocity_enforcement=model_data.reciprocity_enforcement;
    passivity_enforcement=model_data.passivity_enforcement;
    mode_label = cell(length(model_data.mode_data));
    mode_no = length(model_data.mode_data);
    mode_ID = matrix(length(mode_label));
    for(i=1:length(mode_label)){
        mode_label{i} = model_data.mode_data{i}.name;
        mode_ID(i) = model_data.mode_data{i}.ID;
    }
    if (isfield(model_data,"fir_taps")){fir_taps = model_data.fir_taps;}
    if (isfield(model_data,"iir_taps")){iir_taps = model_data.iir_taps;}
    digital_filter_type = model_data.digital_filter_type;
    clear(model_data);
}

if (exist("QA")){
    test_params = struct;
    temperature_test_range = struct;
    if (isfield(QA,"parameters")){
        if (isfield(QA.parameters,"temperature")){
            temperature_test_range.start=QA.parameters.temperature.min;
            temperature_test_range.stop=QA.parameters.temperature.max;
            }
        if (isfield(QA.parameters,"wavelength")){
            if (isstruct(QA.parameters.wavelength)){
                test_ranges = cell(1);
                test_params.wavelength_stop=QA.parameters.wavelength.max;
                test_params.wavelength_start=QA.parameters.wavelength.min;
                if (isfield(QA,"number_wavelength_points")){test_params.number_of_points=QA.number_wavelength_points;}
                test_ranges{1} = test_params;
            }   
            else{
                test_ranges = cell(length(QA.parameters.wavelength));
                for (j= 1: length(test_ranges)){
                    test_params.wavelength_stop=QA.parameters.wavelength{j}.max;
                    test_params.wavelength_start=QA.parameters.wavelength{j}.min;      
                    if (isfield(QA,"number_wavelength_points")){test_params.number_of_points=QA.number_wavelength_points;}                   
                    test_ranges{j} = test_params;
                }
            }
        }
    }
    if (isfield(QA,"N_test")){N_test=QA.N_test;}
    if (isfield(QA,"test_all_combo")){test_all_combo=QA.test_all_combo;}
    if (isfield(QA,"time_domain_test")){time_domain_test=QA.time_domain_test;}
    if (isfield(QA,"reference_data_available")){reference_data_available=QA.reference_data_available;}
    if (isfield(QA,'absolute_tolerances')){
        tols={"S_data","S_regression","S_time","passivity","power_dB","reciprocity","wavelength_nm"};
        for (t=1:length(tols)) {
            eval("tolexist=isfield(QA.absolute_tolerances,'"+tols{t}+"');");
            if (tolexist==1){
                if(tols{t}=="S_regression"){
                    eval("S_tolerance=QA.absolute_tolerances."+tols{t}+";");
                }
                else if(tols{t}=="power_dB"){eval("power_tolerance_dB=QA.absolute_tolerances."+tols{t}+";");}
                else{
                    eval(tols{t}+"_tolerance=QA.absolute_tolerances."+tols{t}+";");
                }
            }
        }
    }
    if (isfield(QA,'relative_tolerances')){
        tols={"group_delay"};
        for (t=1:length(tols)) {
            eval("tolexist=isfield(QA.relative_tolerances,'"+tols{t}+"');");
            if (tolexist==1){
                eval(tols{t}+"_tolerance=QA.relative_tolerances."+tols{t}+";");
            }
        }
    }
    clear(QA);
}

# statistical
if (exist("statistical")){
    if (isfield(statistical,"parameters")){
        statPars=splitstring(getfield(statistical.parameters),endl);
        if (length(statPars)!=0){
            stat_parameters=cell(length(statPars));
            for (p=1:length(statPars)){
                eval("stat_parameters{"+num2str(p)+"}=statistical.parameters."+statPars{p}+";");
                }
        }
    }
    if (isfield(statistical,"measurement_data")){
        stat_measurement_data=statistical.measurement_data;
    }

    if (isfield(statistical,"QA")){
        N_trials=statistical.QA.N_trials;
        if (isfield(statistical.QA,"parameters")){
            if (isfield(statistical.QA.parameters,"wavelength")){
                if (isfield(statistical.QA.parameters.wavelength, "min")){
                    stat_qa_wavelength_start=statistical.QA.parameters.wavelength.min;
                    stat_qa_wavelength_stop=statistical.QA.parameters.wavelength.max;
                } else{
                    stat_qa_wavelength=statistical.QA.parameters.wavelength;
                }
            }
        }
        enable_stat_qa=statistical.QA.enable_qa;
        stat_reference_data_available=statistical.QA.reference_data_available;
        stat_qa_input_port=statistical.QA.input_port;
        stat_qa_output_port=statistical.QA.output_port;
        if (isfield(statistical.QA,'number_wavelength_points')){stat_qa_number_of_points = statistical.QA.number_wavelength_points;}
        if (isfield(statistical.QA,'mode_ID')){stat_qa_mode_ID = statistical.QA.mode_ID;}
        if (isfield(statistical.QA,'absolute_tolerances')){
            stattols={"transmission"};
            for (t=1:length(stattols)) {
                eval("stattolexist=isfield(statistical.QA.absolute_tolerances,'"+stattols{t}+"');");
                if (stattolexist==1){
                        eval("stat_"+stattols{t}+"_tolerance=statistical.QA.absolute_tolerances."+stattols{t}+";");
                }
            }
        }
    }
    clear(statistical);
}

# Backward compatibility 
# Old notes
note_count=0;
for(i=1:10) {
    if(exist("note_" + num2str(i))==1){
        note_count=note_count+1;  
    }
}
if (note_count!=0){
    notes=cell(note_count);
    for (i=1:note_count){
        notes{i}=struct;
        eval('notes{'+num2str(i)+'}.property = note_' + num2str(i) + '.property;');
        eval('notes{'+num2str(i)+'}.value = note_' + num2str(i) + '.value;');
        eval('clear(note_'+ num2str(i)+');');
    }
    warning_elements = warning_elements + " notes";
}

if(!exist("digital_filter_type")) {
    digital_filter_type = "FIR";
    warning_elements = warning_elements + " digital_filter_type";     
}
if (warning_elements!= ""){
    backward_warning = backward_warning+ "\n           WARNING: Following data are in an old format or do not exist:\n          "+ warning_elements+endl+"           This format may not be supported in the future. Please refer to the documentation and update the data format.\n          "+endl;
}